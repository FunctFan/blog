<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>小一辈无产阶级码农</title>
  <description>小一辈无产阶级码农 - 学无先后，达者为师.</description>
  <atom:link href="http://www.r9it.com/rss.xml" rel="self" type="application/rss+xml"/>
  <link>http://www.r9it.com</link>
  <lastBuildDate>Fri, 13 Oct 2017 15:38:26 +0800</lastBuildDate>
  <pubDate>Fri, 13 Oct 2017 15:38:26 +0800</pubDate>
  <ttl>1800</ttl>


  <item>
    <title>SpringBoot 的三种启动方式</title>
    <description>&lt;h1 id=&quot;spring-boot&quot;&gt;Spring Boot 是什么&lt;/h1&gt;

&lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。
该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。&lt;/p&gt;

&lt;p&gt;我简单学习了一下 Spring Boot 的感触就是：简单，方便，快速。&lt;/p&gt;

&lt;p&gt;使用 Spring Boot 只需要简单的几行配置，就可以快速搭建一套web项目，或者构建一套微服务。从此抛弃繁杂的 xml 配置文档，各种注解扫描，
,各种数据库链接，Spring 事物配置，各种日志配置... 这些通通可以省略，极大提高开发效率，让你有更多的时间装逼和陪女朋友逛街。&lt;/p&gt;

&lt;p&gt;哦，一说就停不下来，忘记今天的主题是讲 SpringBoot项目的启动方式了。&lt;/p&gt;

&lt;h1 id=&quot;spring-boot&quot;&gt;Spring Boot 的三种启动方式&lt;/h1&gt;

&lt;p&gt;Spring Boot 的另一优势就是她的项目启动也是非常简单，她本身内置了 web 服务器插件，默认是 tomcat 的，不过你也可以很轻易的把他改成 jetty.
目前来说Spring Boot 有三种比较方便的启动方式，下面我们分别来介绍一下。&lt;/p&gt;

&lt;h3 id=&quot;1-application-main&quot;&gt;1. 直接运行 Application 类的 main 方法&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/10/spring-boot-start-1.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-java-jar&quot;&gt;2. 打包之后使用 java -jar 运行&lt;/h3&gt;

&lt;p&gt;首先将项目打包，执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn clean package -Dmaven.test.skip,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后运行打包的后的 jar 文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java -jar xxxx.jar &amp;gt; error.log &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以传入运行参数，比如需要加载不同的配置文档，在生产环境你可以这样运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java -jar xxx.jar --spring.profiles.active&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prod &amp;gt; error.log &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3-mvn-spring-boot-run&quot;&gt;3. 使用 mvn spring-boot:run 命令运行&lt;/h3&gt;

&lt;p&gt;在项目的根目录运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn spring-boot:run 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里也可以传入运行参数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn spring-boot:run -Drun.arguments&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--spring.profiles.active=prod&quot;&lt;/span&gt; &amp;gt; error.log &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有就是，我在线上环境的测试中发现使用 java -jar 运行的项目不是很稳定，经常莫名奇妙的挂掉了。用 mvn spring-boot:run 却没有发现这个情况
目前还不知道什么原因，也许是参数问题。&lt;/p&gt;

&lt;p&gt;另外，我在码云提交了一个 spring-boot-demo 项目，里面整合了一个快速开发后台的框架，有兴趣的同学可以去参考一下。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/10/spring-boot-start-2.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-demo-r9it-com&quot;&gt;预览地址：&lt;a href=&quot;http://demo.r9it.com&quot;&gt;http://demo.r9it.com&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;git-https-gitee-com-blackfox-spring-boot-demo&quot;&gt;git 地址：&lt;a href=&quot;https://gitee.com/blackfox/spring-boot-demo&quot;&gt;https://gitee.com/blackfox/spring-boot-demo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20171013/springboot-start.html</link>
    <guid>http://www.r9it.com/20171013/sringboot-start</guid>
    <pubDate>Fri, 13 Oct 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>phpstrom 实现php断点调试</title>
    <description>&lt;p&gt;断点调试是编程的一大利器，为我们的调试工作带来很多便利。但是php的断点调试一直不是一件很容易的事情，
所以大部分的phper都还是停留在使用 &lt;strong&gt;死亡输出&lt;/strong&gt; 来进行代码调试。这也是php被一部分javaer吐槽比较多的地方。
本文我就讲讲如何用phpstrom配置php的断点调试。&lt;/p&gt;

&lt;h1 id=&quot;xdebug&quot;&gt;安装xdebug&lt;/h1&gt;

&lt;p&gt;在配置断点调试之前，你必须先安装xdebug，先去官网下载源码，然后编译安装就好了。（windows用户请直接下载编译好的二进制包）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://xdebug.org/files/xdebug-2.5.0.tgz
tar xvpzf xdebug-2.5.0.tgz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xdebug-2.5.0 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; phpize
./configue 
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装好了之后，在php的配置文档中启用xdebug&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;zend_extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xdebug.so
xdebug.remote_enable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
xdebug.remote_mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;req
xdebug.idekey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PHPSTORM&quot;&lt;/span&gt;
xdebug.auto_trace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
xdebug.remote_port &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 9000
xdebug.remote_host &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1
xdebug.remote_handler &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; dbgp
xdebug.collect_params&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
xdebug.collect_return&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
xdebug.profiler_enable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是windows系统，请把xdebug.so 改成 xdebug.dll&lt;/p&gt;

&lt;h1 id=&quot;phpstorm&quot;&gt;配置phpstorm&lt;/h1&gt;

&lt;p&gt;phpstrom 的配置很简单，监听xdebug的端口就好了，打开菜单 Languages -&amp;gt; Frameworks -&amp;gt; PHP -&amp;gt; Debug, 把 &lt;code class=&quot;scode&quot;&gt;Debug port&lt;/code&gt; 改成9000就好了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/xdebug-phpstorm.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;chrome-xdebug&quot;&gt;添加chrome xdebug 扩展&lt;/h1&gt;

&lt;p&gt;要在web端进行断点调试，还需要给谷歌浏览器（目前只支持chrome）安装一个&lt;code class=&quot;scode&quot;&gt;xdebug helper&lt;/code&gt;，这个只需要chrome web store 去搜索以下，然后添加就好了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/xdebug-01.png&quot;  src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装好之后，你的浏览器右边工具栏就有会出现一个xdebug的小图标，调试的时候点击图标选择绿色的那个状态就好了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/xdebug-02.png&quot;  src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;part-626d2afed4014c2f&quot;&gt;开始断点调试&lt;/h1&gt;

&lt;p&gt;一切准备就绪之后，就可以开始断点调试了。首先在chrome把xdebug扩展设置为调试状态（绿色）&lt;/p&gt;

&lt;p&gt;然后还需要在phpstorm点击那个绿色的小电话&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/xdebug-03.png&quot;  src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;java&quot;&gt;访问你打了断点的页面，你就会发现你可以向java那样调试了&lt;/h4&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/xdebug-04.png&quot;  src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
从此断点调试变得如此简单。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20170309/xdebug.html</link>
    <guid>http://www.r9it.com/20170309/xdebug</guid>
    <pubDate>Thu, 09 Mar 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>charles 抓包工具安装与使用</title>
    <description>&lt;p&gt;charles 是一个功能强大的跨平台抓包工具，有window, linux, mac版本。操作简单，界面美观，性能可靠。尤其是用来作为手机代理，可以很方便的破解手机app的通讯过程。&lt;/p&gt;

&lt;p&gt;下面就简单介绍一下如何安装和使用。由于我使用的linux系统，所以是以linux版本为例，其他系统的请参考调试。&lt;/p&gt;

&lt;h1 id=&quot;part-2b83def27d744efc&quot;&gt;关于正版&lt;/h1&gt;

&lt;p&gt;Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，
但是每次使用时间不能超过 30 分钟，使用过程中不定时会中断 5 秒钟，并且启动时将会有 10 秒种的延时。
因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。
只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。当然，没有什么是天朝的网民无法破解的，
我使用的也是破解版，(下面会提供下载地址)。&lt;/p&gt;

&lt;h1 id=&quot;part-6542aa814d1&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;如果想要正版的就去官网下载 &lt;a href=&quot;https://www.charlesproxy.com/download/latest-release/&quot;&gt;&lt;a href=&quot;https://www.charlesproxy.com/download/latest-release/&quot;&gt;https://www.charlesproxy.com/download/latest-release/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里提供一个linux的破解版下载 &lt;a href=&quot;https://pan.baidu.com/s/1skR7erj&quot;&gt;百度网盘&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装很简单，先解压，然后charles.jar 拷贝到 &lt;code class=&quot;scode&quot;&gt;charles/lib&lt;/code&gt;下就好了 &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;charles/bin
./charles  &lt;span class=&quot;c&quot;&gt;#启动&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2be7264b6d94f321&quot;&gt;主要功能&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;截取 Http 和 Https 网络封包。&lt;/li&gt;
&lt;li&gt;支持重发网络请求，方便后端调试。&lt;/li&gt;
&lt;li&gt;支持修改网络请求参数。&lt;/li&gt;
&lt;li&gt;支持网络请求的截获并动态修改。&lt;/li&gt;
&lt;li&gt;支持模拟慢速网络。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;part-2e4bde086585aa11&quot;&gt;配置代理&lt;/h1&gt;

&lt;p&gt;打开charles之后，配置代理服务端口，选择菜单 &amp;quot;Proxy&amp;quot; -&amp;gt;&amp;quot;Proxy Settings&amp;quot;
进入如下界面，设置代理端口，默认为&lt;code
class=&quot;scode&quot;&gt;8888&lt;/code&gt;，同时勾选下面的Enable transparent HTTP
proxying(允许透明代理)。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-05.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;part-2ed2e7790d13f05f&quot;&gt;过滤请求&lt;/h1&gt;

&lt;p&gt;你可以选择只监听某个网站的请求或者过滤某些网站的请求，避免干扰。&lt;/p&gt;

&lt;p&gt;选择菜单 &amp;quot;Proxy&amp;quot; -&amp;gt; &amp;quot;Recording Settings&amp;quot;， 会弹出如下菜单：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-06.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面有3个选项卡，你可以分别设置数据包大小，指定包含或者不包含哪些域名的请求。&lt;/p&gt;

&lt;h1 id=&quot;part-e396a90842df7dc0&quot;&gt;设置手机代理&lt;/h1&gt;

&lt;p&gt;你可以设置手机为PC端的代理，然后你就可以监控手机的通信过程了。使用手机连接PC机所在的路由器或者交换机（保持手机和PC在同一个网络），然后设置你的WIFI代理。
这里以我的小米手机作为demo测试：点开当前连接的WIFI，在代理选择
&amp;quot;手动&amp;quot;，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-08.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后填写代理信息：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;主机名：你的PC机的ip地址(如果不知道使用ifconfig 查询)&lt;/p&gt;

&lt;p&gt;端口：前面你设置的代理端口，默认 8888&lt;/p&gt;

&lt;p&gt;不使用网址：不使用代理的网址，这个根据自己情况设置，如果不设置就是所有对外请求全部使用代理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;贴上我的配置：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-09.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;设置HTTPS代理&lt;/h1&gt;

&lt;p&gt;charles默认是无法代理https请求的，因为没有证书。所以要代理https请求必须先安装证书。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先要安装PC端的证书，选择菜单 &amp;quot;Help&amp;quot; -&amp;gt; &amp;quot;SSL Proxy&amp;quot; -&amp;gt;&amp;quot;Install Charles Root Certificat&amp;quot; (注明：以下为mac截图，linux这个菜单没法截图)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-03.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时会弹出如下导入证书的对话框（这里不同的系统有差异，mac电脑和windows系统也许不是这样，本教程以linux为例子）&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-02.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 &lt;code class=&quot;scode&quot;&gt;import&lt;/code&gt;，输入口令后按确定导入完成。&lt;/p&gt;

&lt;p&gt;导入证书之后会弹出如下对话框，选择&lt;code class=&quot;scode&quot;&gt;Allow&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-01.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;导入手机端证书，选择菜单 &amp;quot;Help&amp;quot; -&amp;gt; &amp;quot;SSL Proxy&amp;quot; -&amp;gt; &amp;quot;Install Charles Root Certificate on a Mobile Device or Remote Browser&amp;quot;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这时会弹出如下对话框：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/03/charles-04.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大致意思是要你在手机浏览器输入&lt;code class=&quot;scode&quot;&gt;&lt;a href=&quot;http://charlesproxy.com/getssl&quot;&gt;http://charlesproxy.com/getssl&lt;/a&gt;&lt;/code&gt;去安装证书。
你照做就好了，输入之后根据提示一步一步完成即可。&lt;/p&gt;

&lt;h1 id=&quot;part-2beaefa2d6c8b1ac&quot;&gt;乱码问题&lt;/h1&gt;

&lt;p&gt;关于部分出现的中文乱码问题，我也碰到过，网上有各种答案，但是我在装完证书之后，
乱码问题也一起解决了。这个仅供参考。&lt;/p&gt;

&lt;h4 id=&quot;part-2bb23717ee7e9bfc&quot;&gt;参考资料&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.devtang.com/2015/11/14/charles-introduction/&quot;&gt;&lt;a href=&quot;http://blog.devtang.com/2015/11/14/charles-introduction/&quot;&gt;http://blog.devtang.com/2015/11/14/charles-introduction/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20170301/charles.html</link>
    <guid>http://www.r9it.com/20170301/charles</guid>
    <pubDate>Wed, 01 Mar 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>【转】：javascript 实现继承的5种方法</title>
    <description>&lt;p&gt;今天介绍javascript的五种实现继承的方法。&lt;/p&gt;

&lt;p&gt;比如，现在有一个&amp;quot;动物&amp;quot;对象的构造函数。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;动物&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一个&amp;quot;猫&amp;quot;对象的构造函数。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;怎样才能使&amp;quot;猫&amp;quot;继承&amp;quot;动物&amp;quot;呢？&lt;/p&gt;

&lt;h1 id=&quot;part-a7681bfe122c48aa&quot;&gt;一、 构造函数绑定&lt;/h1&gt;

&lt;p&gt;第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;大毛&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黄色&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 动物&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;prototype&quot;&gt;二、 prototype模式&lt;/h1&gt;

&lt;p&gt;第二种方法更常见，使用prototype属性。&lt;/p&gt;

&lt;p&gt;如果&amp;quot;猫&amp;quot;的prototype对象，指向一个Animal的实例，那么所有&amp;quot;猫&amp;quot;的实例，就能继承Animal了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;大毛&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黄色&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 动物&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它相当于完全删除了prototype
对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原来，任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有&amp;quot;Cat.prototype
= new
Animal();&amp;quot;这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此，在运行&amp;quot;Cat.prototype = new Animal();&amp;quot;这一行之后，cat1.constructor也指向Animal！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。这就是第二行的意思。&lt;/p&gt;

&lt;p&gt;这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;prototype&quot;&gt;三、 直接继承prototype&lt;/h1&gt;

&lt;p&gt;第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过Animal()，直接继承Animal.prototype。&lt;/p&gt;

&lt;p&gt;现在，我们先将Animal对象改写：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;动物&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;大毛&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黄色&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 动物&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是
Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。&lt;/p&gt;

&lt;p&gt;所以，上面这一段代码其实是有问题的。请看第二行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一句实际上把Animal.prototype对象的constructor属性也改掉了！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Cat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-36727c63e04fb054&quot;&gt;四、 利用空对象作为中介&lt;/h1&gt;

&lt;p&gt;由于&amp;quot;直接继承prototype&amp;quot;存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Animal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将上面的方法，封装成一个函数，便于使用。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用的时候，方法如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;大毛&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黄色&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 动物&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个extend函数，就是YUI库如何实现继承的方法。&lt;/p&gt;

&lt;p&gt;另外，说明一点，函数体最后一行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是&amp;quot;向上&amp;quot;、&amp;quot;上一层&amp;quot;。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。&lt;/p&gt;

&lt;h1 id=&quot;part-dbfd5e6f2ab683b3&quot;&gt;五、 拷贝继承&lt;/h1&gt;

&lt;p&gt;上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用&amp;quot;拷贝&amp;quot;方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第五种方法。&lt;/p&gt;

&lt;p&gt;首先，还是把Animal的所有不变属性，都放到它的prototype对象上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;动物&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，再写一个函数，实现属性拷贝的目的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extend2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数的作用，就是将父对象的prototype对象中的属性，一一拷贝给Child对象的prototype对象。&lt;/p&gt;

&lt;p&gt;使用的时候，这样写：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;extend2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;大毛&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;黄色&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 动物&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文转载于阮一峰老师的网络日志，&lt;a
href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&quot;&gt;查看原文&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/201702/javascript-inherit.html</link>
    <guid>http://www.r9it.com/201702/javascript_inherit</guid>
    <pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>javascript中call和apply的区别</title>
    <description>&lt;p&gt;javascript
中有2个方法用来调用一个对象的一个方法，但是以另一个对象替换当前对象，也就是替换对象的上下文，更改对象的内部指针，简单来说就是更改&lt;code class=&quot;scode&quot;&gt;this&lt;/code&gt;指向的内容。&lt;/p&gt;

&lt;p&gt;这两个方法分别是call和apply,
    他们的作用几乎相同，只是在使用的时候有小小的差别。&lt;/p&gt;

&lt;p&gt;首先看下这2个函数的原型&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thisObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;[,.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]]])&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thisObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;call函数和apply方法的第一个参数都是要传入给当前对象的对象，即函数内部的this。后面的参数都是传递给当前对象的参数。&lt;/p&gt;

&lt;p&gt;其实他们的区别就在传参上面：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;call的参数必须一个一个传进去，但是apply的参数可以作为一个数组一次性传进去&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那么很显然使用apply的好处是可以直接将当前函数的arguments对象作为apply的第二个参数传入。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'zhangsan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lisi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//输出&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//zhangsan&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//30&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//{ '0': 'lisi', '1': 10 }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/201702/javascript-call-apply.html</link>
    <guid>http://www.r9it.com/201702/javascript-call-apply</guid>
    <pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>linux react native开发原生app</title>
    <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前段时间一直想开发一个记录时间开销的app，但是又不想去学android开发，于是就是想使用facebook开源的React-Native 来尝试开发。在自学过程中踩过一些坑，记录下来。&lt;/p&gt;

&lt;h1 id=&quot;1&quot;&gt;1.搭建环境&lt;/h1&gt;

&lt;p&gt;这个比较简单，先安装nodejs，然后再安装react-native-cli，
具体步骤可以参考官方的文档&lt;a
href=&quot;http://reactnative.cn/docs/0.41/getting-started.html#content&quot;&gt;搭建开发环境&lt;/a&gt;, 这篇文档写的很清楚&lt;/p&gt;

&lt;h1 id=&quot;2-hello-world&quot;&gt;2.编写Hello World&lt;/h1&gt;

&lt;p&gt;搭建好环境之后，就可以建一个项目测试一下了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;react-native init &lt;span class=&quot;nb&quot;&gt;test
cd test
&lt;/span&gt;react-native run-android
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很遗憾，在你按照官网的教程运行&lt;code class=&quot;scode&quot;&gt;react-native run-android&lt;/code&gt; 可能会遇到类似下面的报错&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FAILURE: Build failed with an exception.

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; What went wrong:
Execution failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;task &lt;span class=&quot;s1&quot;&gt;':app:installDebug'&lt;/span&gt;.
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;com.android.builder.testing.api.DeviceException: No connected
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;devices!

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;找不到模拟器设备，而官网上并没有告诉你怎么去启动模拟器。首先，你需要添加环境变量, &lt;code class=&quot;scode&quot;&gt;vim ~/.profile&lt;/code&gt;, 加上如下代码（如果已经添加请略过此步）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# ～/Android 是你Android SDK的根目录，如果你的目录不是这样的请自行更改。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/Android/Sdk/tools:~/Android/Sdk/platform-tools:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然你需要注销重新登陆系统或者执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.profile 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来使配置生效。接下来，执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;android avd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入模拟器管理界面，如下：&lt;/p&gt;

&lt;div style=&quot;text-align:left;&quot;&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/02/react-native-01.png&quot; src=&quot;/images/1px.png&quot; /&gt; &lt;/div&gt;

&lt;p&gt;点击 &lt;code class=&quot;scode&quot;&gt;Create&lt;/code&gt;
按钮创建一个新的模拟器，然后再点击 &lt;code class=&quot;scode&quot;&gt;Start&lt;/code&gt;
按钮启动就好了。&lt;/p&gt;

&lt;p&gt;然后再切换到 test 项目目录，执行 &lt;code class=&quot;scode&quot;&gt;react-native run-android&lt;/code&gt; 就可以在模拟器中测试项目了。&lt;/p&gt;

&lt;p&gt;我的测试项目启动预览图如下&lt;/p&gt;

&lt;div style=&quot;text-align:left;&quot;&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/02/react-native-02.png&quot; src=&quot;/images/1px.png&quot; /&gt; &lt;/div&gt;

&lt;h1 id=&quot;3-apk&quot;&gt;3.打包APK项目&lt;/h1&gt;

&lt;p&gt;在项目开发完成之后就要将项目打包成APK了，这个react-native官方也有详细的教程
&lt;a href=&quot;http://reactnative.cn/docs/0.41/signed-apk-android.html&quot;&gt;打包APK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20170220/react-native.html</link>
    <guid>http://www.r9it.com/20170220/ubuntu-react-native</guid>
    <pubDate>Mon, 20 Feb 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>ubuntu 安装Wine longene QQ 7.8 和微信</title>
    <description>&lt;p&gt;毫无疑问，在linux系统环境下编程是非常愉快的。所以它应该是程序员的首选工作操作系统，但是作为开发人很尴尬的问题就是我们要和其他部门人员沟通总是或多或少要使用QQ这个神奇的聊天工具，而偏偏企鹅公司并没有打算开发linux版本的qq(可能是因为linux软件是开源不收费的原因）。几经折腾，在ubuntu 14.04 LTS上安装成功了，记录一下步骤。&lt;/p&gt;

&lt;h1 id=&quot;1-deb&quot;&gt;1.下载deb安装包&lt;/h1&gt;

&lt;p&gt;直接去longene 官网下载就好了&lt;/p&gt;

&lt;p&gt;WineQQ7.8-20151109-Longene：&lt;a href=&quot;WineQQ7.8-20151109-Longene：http://www.longene.org/download/WineQQ7.8-20151109-Longene.deb&quot;&gt;&lt;a href=&quot;http://www.longene.org/download/WineQQ7.8-20151109-Longene.deb&quot;&gt;http://www.longene.org/download/WineQQ7.8-20151109-Longene.deb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载完之后直接 dpkg -i WineQQ7.8-20151109-Longene.deb &lt;/p&gt;

&lt;p&gt;如果是16.04LTS版本的系统，就执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo gdebi WineQQ7.8-20151109-Longene.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完之后你会发现无法启动，这是因为你还有依赖没有安装。&lt;/p&gt;

&lt;h1 id=&quot;2&quot;&gt;2.安装依赖&lt;/h1&gt;

&lt;p&gt;很显然，你首先要安装wine,
因为没有linux版本的qq，所以你要在linux系统下模拟windows运行环境。这里你需要安装1.7以上的版本&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo add-apt-repository ppa:ubuntu-wine/ppa
sudo apt-get update
sudo apt-get install wine1.7 winetricks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据官网的教程，如果是64位的系统，那你需要安装32的依赖 &lt;code
class=&quot;scode&quot;&gt;ia32-libs&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install ia32-libs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果你可能遇到类似的报错&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;E: Package &lt;span class=&quot;s1&quot;&gt;'ia32-libs'&lt;/span&gt; has no installation candidate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是因为ia32-libs这个包已经被取消了，直接装对应的32位包就行了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libgtk2.0-0:i386
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装成功就OK了。&lt;/p&gt;

&lt;p&gt;接下来就可以启动qq了。&lt;/p&gt;

&lt;p&gt;&lt;img data-src=&quot;/images/2017/02/qq-01.png&quot; class=&quot;img-view&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3&quot;&gt;3.显示状态栏&lt;/h1&gt;

&lt;p&gt;一个令人尴尬的问题是，登陆qq之后，在顶部的状态栏并没有显示qq图标，这意味着你关闭qq窗口之后再也找不到它了。这是因为Ubuntu
Unity
添加了软件图标白名单，因此部分软件的图标无法在任务栏中显示。解决办法如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 安装indicator-systemtray-unity&lt;/span&gt;
sudo apt-add-repository ppa:fixnix/indicator-systemtray-unity
sudo apt-get update
sudo apt-get install indicator-systemtray-unity
&lt;span class=&quot;c&quot;&gt;# 安装图形界面设置工具&lt;/span&gt;
sudo apt-get install dconf-editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完毕之后，搜索软件Dconf-Editori (或者直接再终端输入 dconf-editor 命令)，在net &amp;gt; launchpad &amp;gt; indicator &amp;gt;
systemtray 中设置显示图标的位置，下面贴出我的配置, 仅供参考:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/02/qq-install-02.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，安装过程结束。&lt;/p&gt;

&lt;p&gt;重启系统，启动qq，这时你就回发现顶部的状态栏上面出现qq图标了。&lt;/p&gt;

&lt;p&gt;本人亲测，这个版本的qq使用起来很流畅，发表情，截图，文件都没有问题，完全可以跟windows系统qq相媲美了。&lt;/p&gt;

&lt;h1 id=&quot;4-app&quot;&gt;4.添加微信app&lt;/h1&gt;

&lt;p&gt;有了qq之后你可能还会想，要是有微信就更好了。这个其实很容易，在google chrome浏览器添加一个微信app就好了。&lt;/p&gt;

&lt;p&gt;首先在google应用中心搜索 &lt;code class=&quot;scode&quot;&gt;wechat&lt;/code&gt;, 如图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/02/qq-install-04.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击微信app旁边的添加按钮。&lt;/p&gt;

&lt;p&gt;添加完之后在&lt;code class=&quot;scode&quot;&gt;App&lt;/code&gt; 中心就可以看到微信了，点击打开就好了&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/02/qq-install-03.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你找不到应用中心的话，那就直接在浏览器地址栏输入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chrome://apps/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，贴上一个我安装完之后的效果图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2017/02/qq-install-05.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么问题来了，看完这篇文章你是不是觉得又多了一个彻底抛弃windows的理由了呢。O(∩_∩)O~&lt;/p&gt;

&lt;p&gt;欢迎在留言区写下你的想法.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20170219/ubuntu-install-qq2013.html</link>
    <guid>http://www.r9it.com/20170219/ubuntu-install-longeneqq</guid>
    <pubDate>Sun, 19 Feb 2017 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>IT团队管理心得</title>
    <description>&lt;p&gt;记得曾经有位领导在员工大会上谈管理的时候，说人人都是管理者，因为你从一出生开始一直都在管理你自己。管理自己的情绪，管理你的时间，管理你的零花钱...我一直觉得这话说虽然没错，但是又有点牵强。因为自我管理和管理团队还是有比较大的区别的。人人都是管理者至少他对我们绝大部分人来说是不靠谱的，否则管理者就是大多数人，而不是极少数人。在这里总结了一些自己的工作心得，因为是一家之言，纯属个人见解，所以不接受大家吐槽。&lt;/p&gt;

&lt;p&gt;在此之前我想先讲讲IT团队员工的特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;高学历, 知识密集型. 学习的需求强烈，学习能力也普遍较强.&lt;/li&gt;
&lt;li&gt;人际关系简单. 摩擦大多数由技术产生, 相处也比较容易.&lt;/li&gt;
&lt;li&gt;需要较高的自由度，希望完成任务之后能做自己的事情，更希望能以自己的方式完成工作，不太喜欢领导参与技术决策和实施。&lt;/li&gt;
&lt;li&gt;对公司的发展前景比较看重. 没有发展前途, 就会离开.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;part-4a303ab67f58a45c&quot;&gt;一、从《孙子兵法》到《战争论》&lt;/h1&gt;

&lt;p&gt;在全世界所有的军事理论著作中，最著名的要数孙武的《孙子兵法》和克劳塞维茨的《战争论》了。孙子兵法非常全面的概括了战争中和战略有关的方方面面，虽然不能说是算无遗策，但是覆盖得却非常完备。
但是很显然如果一个熟读了孙子兵法之后就去打仗，显然是怎么靠谱的，历史上的赵括同学和李景龙同学就是最好的佐证。
因为孙子兵法讲的都是战略思想，并没有什么可操作性，因为中国哲学强调&lt;code class=&quot;scode&quot;&gt;“道可道，非常”&lt;/code&gt;，&lt;code class=&quot;scode&quot;&gt;“无用之用，是为大用”&lt;/code&gt;这样的哲学思想，并不重视具体的操作.
&lt;code class=&quot;scode&quot;&gt;最杰出的军事家往往讲究“运用之妙，存乎一心”完全靠性。&lt;/code&gt;所以中国历史上的名将往往都是不可复制的。
&lt;strong&gt;相反克劳塞维茨的《战争论》可以讲是孙子兵法的补充，但是它具有很强的可操作性，用现在的话来说，它的套路很清晰，从没上过战场的人只要在军校里学习《战争论》，军事素养都会有很大的提升。&lt;/strong&gt;
好了，前面讲了这么多，我们回归正题，讲讲公司的愿景，目标的问题。基本上是你一进公司在入职培训的时候HR部门都会跟你公司的愿景和目标。
比如盟大的愿景是：成为全球产业价值链服务提供商，成为一家受人尊敬的互联网公司。愿景目标其实大部分公司做的都不差。
&lt;strong&gt;但是光有愿景和目标还不行，还得有一系列可操作的步骤&lt;/strong&gt; 因为没有可操作性的步骤，愿景和目标订了也是白订，因此下面的员工还是不知道怎么行动。而大部分管理者往往忽视了这一点，而把大部分精力放在激励员工上面了。
因此，管理者必须为公司设定好三件事情，愿景，目标和可操作的步骤。比如说我们研发部的目标之一是提高代码质量，那么定期（每周）做一次代码review, 要求每个小伙伴都要为自己写服务写单元测试等这些就是可操作的步骤。
也就是说作为管理者我们光学习了《孙子兵法》还不够，还得学习《战争论》。&lt;/p&gt;

&lt;h1 id=&quot;part-a6516b62e94392e2&quot;&gt;二、别让员工成为伪工作者&lt;/h1&gt;

&lt;p&gt;在创业公司，每天的事情太多，总是做不完，是IT人员遇到的一个普遍的问题（其实其他部门也是有的）。个人觉得唯一的解决办法恐怕就是一些事情不要做了，而不是把所有的事情都凑合着完成。
但是这个时候偏偏会出现这类人，天天忙碌，加班到很晚，但是就是没有什么工作成果，简单的来说就是出工不出活。
严格来说，“没有功劳，也有苦劳”这种工作观是不应该出现在像我们这种互联网创业公司的，这种人现在我们都称之为“伪工作者”。
所以作为管理者，你应该帮助员工学会找出最重要，最紧急的工作，帮助他们学会适当的过滤掉一些看起来很紧急但是实际上却根本不重要的工作。
简单来说就是要让他们学会把任务划分优先级，因为互联网的产品一直在不断的迭代，优化，升级，总是一个任务没有开发完，就会有新的任务进来，一次不存在把一个工作队列清空的可能性，如果不懂得分清工作的重要性，那你就没有办法避免成为伪工作者的可能性。
那如何判断任务的优先级呢？吴军老师曾经在他的《硅谷来信》栏目中提到过一个判断方法 -- 简单来说，如果你完成的这个工作立马就可以为公司创造利益，那这个工作就是最紧急的。&lt;/p&gt;

&lt;h1 id=&quot;part-1ce031ebd4f193c1&quot;&gt;三、尊重员工个性，营造好的工作环境&lt;/h1&gt;

&lt;p&gt;刚刚我在上面简单描述了下IT团队成员的特点，其中有一点就是需要较高的自由度，但凡这种人都有自己的个性，不喜欢拘束。所以对于管理者来说, 包容下属以与自己不同的方式工作, 是一大挑战. 君子和而不同, 除非真的有必要, 管理者不要去干预员工的工作方式。
研发部一直主张相对宽松欢快的工作环境，这样员工就不会感到有拘束感，能够使不擅长沟通的IT人员快速交流讨论起来。包括我们的下午茶文化，也是想让大家不仅能在一起愉快的工作，也能聚在一起愉快的吃，愉快的吹牛。&lt;/p&gt;

&lt;h1 id=&quot;part-4644a40d8d0ed1f0&quot;&gt;四、尽量避免开会&lt;/h1&gt;

&lt;p&gt;如果不是非常有必要，尽量避免开会，&lt;strong&gt;因为人类已知的最浪费时间的事情，就是开会。&lt;/strong&gt;这里并不是说会议不重要，而是能够不开会就能解决问题的尽量不开会。有些事情无法避免开会的也尽量缩短会议时间，提高会议效率。&lt;/p&gt;

&lt;h1 id=&quot;part-7f64eec4da06cbaa&quot;&gt;五、给员工设定正确的期望值函数&lt;/h1&gt;

&lt;p&gt;在研究机器学习的时候经常会使用到期望函数的最优化问题。简单的说就是给出一个收益函数，在每一时刻，算出能够最大收益的期望值的方向，然后在不断迭代，最终一定能够达到收益最大的那个终点。其实宇宙演变和物种进化也是遵循这个期望值最大化方法的。
这个解释有点抽象，简单点的来说，就是管理者或者是公司的创始人创立了一种什么样的价值观，员工就会不自觉地朝着收益最大化的方向努力。所以管理者与其大会小会的教育员工，给员工各种激励，还不如设置一个好的收益函数。比如想要提高员工的代码质量，那么技术部门就要设定一个有利于提高代码质量的期望值。比如对那些坚持写单元测试的员工给予一定的奖励，经常不愿意写单元测试的员工给予一些小小的惩戒。那么大家就会朝着自己受益最大化的方向去努力了。反过来，那种既想让员工降低自己的期望值，有想要保证组织的收益最大化，这是违反期望值最大化原则的&lt;/p&gt;
</description>
    <link>http://www.r9it.com/2016-11-04/it-team-management.html</link>
    <guid>http://www.r9it.com/2016-11-04/it-team-managerment</guid>
    <pubDate>Fri, 04 Nov 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>解决Call to undefined function imagettftext()方法</title>
    <description>&lt;p&gt;前几天系统崩溃了，重装系统之后第一件事情就是编译LNMP开发环境，当编译好php之后执行一个验证码生成的程序，结果报错&amp;quot;function imagettftext() not found&amp;quot;. 搞的我一脸懵逼，因为我在编译php的时候明明添加了&lt;code class=&quot;scode&quot;&gt;--enable-gd&lt;/code&gt; 这个选项的。&lt;/p&gt;

&lt;p&gt;没有办法，那就一步一步排查把，首先打开phpinfo页面，发现gd扩展是确实有安装的。google一下，找到一个答案说是编译的时候没有加上&lt;code class=&quot;scode&quot;&gt;FreeType&lt;/code&gt;. 这里顺便介绍下&lt;code class=&quot;scode&quot;&gt;FreeType&lt;/code&gt;是个什么东西&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FreeType库是一个完全免费（开源）的、高质量的且可移植的字体引擎，它提供统一的接口来访问多种字体格式文件，包括TrueType, OpenType, Type1, CID, CFF, Windows FON/FNT, X11 PCF等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说gd库需要通过它来调用字体绘图。那闲话不多说，看解决办法：&lt;/p&gt;

&lt;p&gt;首先安装 FreeType, 我这里安装的是2.4.0：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://download.savannah.gnu.org/releases/freetype/freetype-2.4.0.tar.bz2
tar -jxf freetype-2.4.0.tar.bz2
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;freetype-2.4.0
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/freetype
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok,FreeType 安装搞定！&lt;/p&gt;

&lt;p&gt;那么接下来你有2中方案去选择，第一种是直接编译php，在php configure 编译选项中加上 &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;--with-freetype-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/freetype
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二种方案比较简单些，既然是GD库的扩展有问题，那么直接把gd库的扩展重新编译，为它指定freetype的路径就好了。以下假设 {php_source_dir} 为你下载的php源码的目录, {php_install_dir}&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;php_source_dir&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/ext/gd
phpize
./configure --with-freetype-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/freetype --with-php-config&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;php_install_dir&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/bin/php-config
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再在你的php配置文档中加上&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gd.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启php-fpm sudo service php-fpm restart&lt;/p&gt;

&lt;p&gt;现在打开验证码页面，一切OK，全部搞定。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20161016/imagettftext-notfound.html</link>
    <guid>http://www.r9it.com/20161016/function-imagettftext-notfound</guid>
    <pubDate>Sun, 16 Oct 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>Ubuntu上如何检测某个软件包是否安装</title>
    <description>&lt;p&gt;记得初学linux的时候，到网上去查找&amp;quot;linux如何查询某个软件包是否安装&amp;quot;， 结果出来90%的都是 &lt;code class=&quot;scode&quot;&gt;rpm -qa&lt;/code&gt;, 然后把这条命令在自己的终端敲出来的时候每次都是很遗憾的命名没有找到。后来才知道，原来我使用的是ubuntu发行版，&lt;code class=&quot;scode&quot;&gt;rpm&lt;/code&gt;是centOS的软件包管理机制。Ubuntu 应该使用 dpkg来查询。&lt;/p&gt;

&lt;p&gt;在本篇中，让我们看下如何在基于DEB的系统下检查是否安装了一个包。&lt;/p&gt;

&lt;p&gt;要查询特定的安装包，比如说vim是否被安装，使用下面这个命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg -s vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;终端输出结果&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Package: vim
Status: install ok installed
Priority: optional
Section: editors
Installed-Size: 2400
Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt;
Architecture: amd64
Version: 2:7.4.1689-3ubuntu1.1
Provides: editor
Depends: vim-common &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 2:7.4.1689-3ubuntu1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, vim-runtime &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 2:7.4.1689-3ubuntu1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, libacl1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.2.51-8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, libc6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, libgpm2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1.20.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, libpython3.5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3.5.0~b1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, libselinux1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1.32&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, libtinfo5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Suggests: ctags, vim-doc, vim-scripts
Description: Vi IMproved - enhanced vi editor
Vim is an almost compatible version of the UNIX editor Vi.
.
Many new features have been added: multi level undo, syntax
highlighting, &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt;, on-line &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;, filename
completion, block operations, folding, Unicode support, etc.
.
This package contains a version of vim compiled with a rather
standard &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;of features.  This package does not provide a GUI
version of Vim.  See the other vim-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; packages &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you need more
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or less&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Homepage: http://www.vim.org/
Original-Maintainer: Debian Vim Maintainers &amp;lt;pkg-vim-maintainers@lists.alioth.debian.org&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;能输出详细的安装信息，则说明你要查询的软件包已经安装了，否则，如果安装包不存在，则会输出如下内容：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg-query: package &lt;span class=&quot;s1&quot;&gt;'vims'&lt;/span&gt; is not installed and no information is available
Use dpkg --info &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; dpkg-deb --info&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to examine archive files,
and dpkg --contents &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; dpkg-deb --contents&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to list their contents.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你还可以使用dpkg-query 命令。这个命令会有一个更好的输出，当然，你可以用通配符&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg-query -l vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;
&lt;span class=&quot;nv&quot;&gt;Desired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Unknown/Install/Remove/Purge/Hold
| &lt;span class=&quot;nv&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/Reinst-required &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status,Err: &lt;span class=&quot;nv&quot;&gt;uppercase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bad&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;/ Name                     Version           Architecture      Description
+++-&lt;span class=&quot;o&quot;&gt;========================&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;=================&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;=================&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;
ii  vim                      2:7.4.1689-3ubunt amd64             Vi IMproved - enhanced vi editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要列出你系统中安装的所有包，输入下面的命令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg --get-selections
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果类似：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;xinit                       install
xinput                      install
xkb-data                    install
xml-core                    install
xorg                        install
xorg-docs-core                  install
xorg-sgml-doctools              install
xserver-common                  install
xserver-xorg                    install
xserver-xorg-core               install
xserver-xorg-input-all              install
xserver-xorg-input-evdev            install
xserver-xorg-input-synaptics            install
xserver-xorg-input-vmmouse          install
xserver-xorg-input-wacom            install
xserver-xorg-video-all              install
xserver-xorg-video-amdgpu           install
xserver-xorg-video-ati              install
xserver-xorg-video-fbdev            install
xserver-xorg-video-intel            install
xserver-xorg-video-nouveau          install
xserver-xorg-video-qxl              install
xserver-xorg-video-radeon           install
xserver-xorg-video-vesa             install
xserver-xorg-video-vmware           install
xterm                       install
xtrans-dev                  install
xul-ext-ubufox                  install
xz-utils                    install
yelp                        install
yelp-xsl                    install
zeitgeist-core                  install
zeitgeist-datahub               install
zenity                      install
zenity-common                   install
zip                     install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你同样可以通过grep来过滤割到更精确的包。比如，我想要使用dpkg命令查看系统中安装的gcc包：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg --get-selections | grep gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果类似:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc                     install
gcc-5                       install
gcc-5-base:amd64                install
gcc-5-base:i386                 install
gcc-6-base:amd64                install
gcc-6-base:i386                 install
libgcc-5-dev:amd64              install
libgcc1:amd64                   install
libgcc1:i386                    install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此外，你可以使用“-L”参数来找出包中文件的位置。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dpkg -L vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果类似：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/.
/usr
/usr/bin
/usr/bin/vim.basic
/usr/share
/usr/share/bug
/usr/share/bug/vim
/usr/share/bug/vim/presubj
/usr/share/bug/vim/script
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/vim
/usr/share/doc
/usr/share/doc/vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    <link>http://www.r9it.com/20161012/check-soft-installed.html</link>
    <guid>http://www.r9it.com/20161012/ubuntu-checksoft-installed</guid>
    <pubDate>Wed, 12 Oct 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>细说mongodb 分组查询</title>
    <description>&lt;p&gt;最近在给&lt;code&gt;herosphp&lt;/code&gt;框架添加mongodb支持，考虑到后期可能要切换模型，所以就把Model层把mysql和mongodb的查询语法做了兼容，屏蔽差异性。简单的增删查改都没有问题，可以很方便的做兼容，但是在处理分组查询的时候，发现mongodb的分组查询跟mysql的差别还是蛮大的。&lt;/p&gt;

&lt;p&gt;mongodb的原生查询shell语法是这样的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;db.collection.group&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;keys, initial, reduce, conditions &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;包含四个参数&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数名&lt;/th&gt;
&lt;th&gt;参数说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;keys&lt;/td&gt;
&lt;td&gt;分组字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initial&lt;/td&gt;
&lt;td&gt;分组初始条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reduce&lt;/td&gt;
&lt;td&gt;分组计算方式，是一个javascript函数表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conditions&lt;/td&gt;
&lt;td&gt;分组条件，相当与mysql中的having&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;下面看php的demo&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$address = array('东莞','深圳','广州','北京','上海','杭州');
for ( $i = 0; $i &lt;span class=&quot;nt&quot;&gt;&amp;lt; 100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;array(&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; uniqid()+$i,
        &quot;name&quot; =&amp;gt; &quot;user_{$i}&quot;,
        &quot;age&quot; =&amp;gt; $i,
        &quot;address&quot; =&amp;gt; $address[mt_rand(0,5)]
    );

    $collection-&amp;gt;insert($data);
}

$keys = array(&quot;address&quot; =&amp;gt; 1);
$initial = array(&quot;items&quot; =&amp;gt; array());
$reduce = &quot;function (obj, prev) { prev.items.push({id:obj.id, name:obj.name, age:obj.age}); }&quot;;
$conditions = array('age' =&amp;gt; '&amp;gt;30');
$items = $collection-&amp;gt;($keys, $initial, $reduce, $conditions);
print_r($items);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似输出&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Array
(
    [0] =&amp;gt; Array
        (
            [address] =&amp;gt; 广州
            [items] =&amp;gt; Array
                (
                    [0] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02773128-DD27-721CC2CD
                            [name] =&amp;gt; user_31
                            [age] =&amp;gt; 31
                        )

                    [1] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02DBC660-7DDB-C88F1629
                            [name] =&amp;gt; user_44
                            [age] =&amp;gt; 44
                        )

                    [2] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02EAB698-A2FC-C18B29C7
                            [name] =&amp;gt; user_48
                            [age] =&amp;gt; 48
                        )


                )

        )

    [1] =&amp;gt; Array
        (
            [address] =&amp;gt; 深圳
            [items] =&amp;gt; Array
                (
                    [0] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-027ED43C-C635-8614CA6F
                            [name] =&amp;gt; user_32
                            [age] =&amp;gt; 32
                        )

                    [1] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-0286BECC-A1FA-83664B53
                            [name] =&amp;gt; user_33
                            [age] =&amp;gt; 33
                        )

                    [2] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02FCC0F4-1068-CA3956FA
                            [name] =&amp;gt; user_53
                            [age] =&amp;gt; 53
                        )

                    [3] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-0305C334-74E8-FEAED1C5
                            [name] =&amp;gt; user_56
                            [age] =&amp;gt; 56
                        )

                    [4] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-03A1C194-C9E2-7DA08D30
                            [name] =&amp;gt; user_83
                            [age] =&amp;gt; 83
                        )

                    [5] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-03BAEBC4-1D32-DAE7B6F6
                            [name] =&amp;gt; user_91
                            [age] =&amp;gt; 91
                        )

                    [6] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-03C5C8A0-756F-4431B377
                            [name] =&amp;gt; user_94
                            [age] =&amp;gt; 94
                        )

                    [7] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-03CC3BCC-5369-5640621D
                            [name] =&amp;gt; user_96
                            [age] =&amp;gt; 96
                        )

                )

        )

    [2] =&amp;gt; Array
        (
            [address] =&amp;gt; 东莞
            [items] =&amp;gt; Array
                (
                    [0] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-028EAAEC-F943-739CB194
                            [name] =&amp;gt; user_34
                            [age] =&amp;gt; 34
                        )

                    [1] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02964824-991A-02042310
                            [name] =&amp;gt; user_35
                            [age] =&amp;gt; 35
                        )

                    [2] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02A5AD28-7FC6-E3467535
                            [name] =&amp;gt; user_37
                            [age] =&amp;gt; 37
                        )

                    [3] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02AD62FC-C660-1041D78D
                            [name] =&amp;gt; user_38
                            [age] =&amp;gt; 38
                        )

                    [4] =&amp;gt; Array
                        (
                            [id] =&amp;gt; B21A-57B2EA6F-02D396AC-065B-C482232D
                            [name] =&amp;gt; user_43
                            [age] =&amp;gt; 43
                        )

                )

        )


)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;令人眼前一亮的是mongodb的分组计算方式 reduce, 是一个javascript函数表达式，这样我们可以很方便的自定义分组方式，并且得到我们想要的数据。不像mysql一样要先查出分组，然后再根据分组查询，麻烦不说，而且效率也很低。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160819/mongodb-group.html</link>
    <guid>http://www.r9it.com/20160819/mongo-group</guid>
    <pubDate>Fri, 19 Aug 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>简单了解php7的新特性</title>
    <description>&lt;p&gt;截止到目前为止，PHP官方已经发布了php7的7.0.9版本，现在来说php7的重大特性肯定已经是定型了，不会再有什么变动了。后续一些版本的迭代主要也就是修修bug，优化之类的。下面就来说话我们一直期待的php7会有那些主要的变化了。。。&lt;/p&gt;

&lt;h1 id=&quot;1&quot;&gt;1.标量数据类型&lt;/h1&gt;

&lt;p&gt;string, int, float, bool，会按照定义的类型自动进行数据类型的转换, 也就是说php7已经逐步支持强类型了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;function addUser(string name, int age) {
    echo &quot;add user {$name}, {$age} years old.&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样看起来是不是代码的语义化也更强一些。&lt;/p&gt;

&lt;h1 id=&quot;2&quot;&gt;2.函数返回类型的定义支持&lt;/h1&gt;

&lt;p&gt;php7支持返回类型定义，用于返回类型的自动标准和自动转换&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;function login(string username, string password) : bool {
    return false;
}
login(&quot;root&quot;, &quot;123456&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-null&quot;&gt;3.null的快捷合并操作&lt;/h1&gt;

&lt;p&gt;这个特性不错，可以节省不少代码，替换三目运算符&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$username = $_GET['user'] ?? 'nobody';
//来代替之前的：
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';
//甚至还可以这么用：
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-spaceship&quot;&gt;4.新增Spaceship（飞船）操作符号&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$a &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;=&amp;gt; $b
//来代替：
if ($a &amp;gt; $b ) return 1;
else if ( $a == b ) return 0;
else return -1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个特性对于数据的比较又可以省去不少代码了&lt;/p&gt;

&lt;h1 id=&quot;5-define&quot;&gt;5.define可以定义常量数组了&lt;/h1&gt;

&lt;p&gt;这个不粗，在PHP5.6，它们只能使用 const 关键字定义. 这样就可以方便define定义的常量的统一管理，也解决了常量命名冲突的问题。如果是这样的话，也不需要每次定义常量之前都用&lt;code&gt;defined&lt;/code&gt;函数检查了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);
print(animals[1]);

//以上将输出cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;6&quot;&gt;6.支持匿名类的使用&lt;/h1&gt;

&lt;p&gt;在php7以后开始支持匿名类，匿名类像普通类一样传递参数到匿名类的构造器，也可以扩展（extend）其他类、实现接口（implement interface），以及像其他普通的类一样使用 trait&lt;/p&gt;

&lt;p&gt;不过一直觉得匿名类除了用来创建一次性的简单对象之外没啥卵用，不过一般支持匿名类的语言，基本可以支持闭包，这个对于后期重复操作代码的减少很有用，闭包理解为：实现某种业务的逻辑代码，可以理解为微型函数，不同在于，可以动态的绑定到执行环境进行调用！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$getX = function() {return $this-&amp;gt;x;};
echo $getX-&amp;gt;call(new A);
//将getX闭包，绑定到new A对象上执行！
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个特性很棒！&lt;/p&gt;

&lt;h1 id=&quot;7&quot;&gt;7.快捷进行除法并且放回取整结果&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;int a = intdiv(10, 3);
a = 3
//来代替：(int) 10/3或者floort(10/3)
//这个主要是运行速度上的优化！
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;8-dirname&quot;&gt;8.dirname()函数增加了第二个参数&lt;/h1&gt;

&lt;p&gt;第二个参数表示剔除的层数，免去&lt;code&gt;dirname(dirname(&lt;strong&gt;FILE&lt;/strong&gt;))&lt;/code&gt;这种嵌套的调用！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;$dir = dirname(dirname(dirname(__FILE__)))
//等价于：
$dir = dirname(__FILE__, 3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;9-unicode&quot;&gt;9.对unicode有更好的支持了&lt;/h1&gt;

&lt;p&gt;例如如下，可以输出一个emoji表情：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;echo &quot;\u{1F60D}&quot;; // outputs 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;10&quot;&gt;10.便于引入相同的命名空间的类和函数&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;// 新语法写法
use FooLibrary\Bar\Baz\{ ClassA, ClassB, ClassC, ClassD as Fizbo };

// 以前语法的写法

use FooLibrary\Bar\Baz\ClassA;
use FooLibrary\Bar\Baz\ClassB;
use FooLibrary\Bar\Baz\ClassC;
use FooLibrary\Bar\Baz\ClassD as Fizbo;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;11&quot;&gt;11.可以捕获系统内核异常了&lt;/h1&gt;

&lt;p&gt;这个貌似是个坑，亲测发现，虽然可以抛出异常了，但是并不能捕获&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;try {
    test_func();
} catch(EngineException $e) {
    echo &quot;Exception: {$e-&amp;gt;getMessage()}\n&quot;;
} finally {
    echo &quot;undefined function…&quot;;n
}   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码在php5中只会输出错误，不会抛出异常，如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;PHP Fatal error:  Call to undefined function test_func() in test.php on line 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在php7中就会抛出异常，而不是简单的抛出错误信息，如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;undefined function…PHP Fatal error:  Uncaught Error: Call to undefined function test_func() in /home/yangjian/test.php:4
Stack trace:
#0 {main}
thrown in /home/yangjian/test.php on line 4

Fatal error: Uncaught Error: Call to undefined function test_func() in /home/yangjian/test.php:4
Stack trace:
#0 {main}
thrown in /home/yangjian/test.php on line 4

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;12-php7&quot;&gt;12.php7弃用的一些功能&lt;/h1&gt;

&lt;p&gt;php7中也放弃了一些过时的功能，这里列出2点
1. PHP4式构造函数，它与类的名称相同，因为它们是在所定义类的方法，现在已过时，并且将在未来被移除。
2. 非静态方法静态调用已被弃用，并且可能在将来被移除。也就是说非静态方法已经不能用&lt;code&gt;Class::method();&lt;/code&gt;的形式调用了&lt;/p&gt;

&lt;h1 id=&quot;part-d0d964e0439b&quot;&gt;总结 &lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;总结来说，php7性能的优化，是来自多部分的小细节优化叠加的效果！&lt;/strong&gt;
php7采用了PHP NG – Zend Engine ，最大的改变，在于运行速度上面，测试了，确实比老版本快了１倍，php7对于速度的主要优化在两个方面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;优化了编译是得到的运行指令排序更适合现代CPU的cache line，充分利用cpu的多级缓存！&lt;/li&gt;
&lt;li&gt;运行过程中减少了很多内存的搬运，例如用于存储变了的zval结构体从24为减少为16位，用户类存储和数组存储的HashTable结构体从72位减少为56位！&lt;/li&gt;
&lt;li&gt;有意识的将zval的二级指针变成了一级，也就是把部分变量了从堆空间变成了栈空间存储，对于变量的操作和内存的释放上面，充分利用运行栈的优势！&lt;/li&gt;
&lt;/ol&gt;
</description>
    <link>http://www.r9it.com/20160817/php7-new-feature.html</link>
    <guid>http://www.r9it.com/20160817/php7-new-featrues</guid>
    <pubDate>Wed, 17 Aug 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>php的true和TRUE引发的一些思考</title>
    <description>&lt;p&gt;最近在写php代码的时候突然很纠结一个问题，就是php里面的那些预定义常量也预定义变量到底有什么区别。比如说&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;TRUE&lt;/code&gt;,
&lt;code&gt;false&lt;/code&gt;和&lt;code&gt;FALSE&lt;/code&gt;，&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;NULL&lt;/code&gt;...
那么这些变量对到底有什么区别呢，作为一名热衷技术热衷死磕的码农，果断要测试一下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;var_dump(true === TRUE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果为&lt;code&gt;bool(true)&lt;/code&gt;，那意味着他们是没有区别的。那么问题来了，php为什么要放2个一毛一样的预定义变量呢？是有什么用意呢，还是本身语言设计的历史遗留问题？百度google一大圈
没有找到合适的答案，于是果断去看php的编译源代码，php的整个编译程序只有一个文件，都在&lt;code&gt;zend/zend_compile.c&lt;/code&gt;里面，大概7000多行，看着眼花，没办法，也要慢慢看，结果还是找到了想要的答案，这里记录过程，以便查阅。&lt;/p&gt;

&lt;p&gt;这里看看php字面量常量的编译&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;static int zend_add_const_name_literal(zend_op_array *op_array, zend_string *name, zend_bool unqualified) 
{
    zend_string *tmp_name;

    int ret = zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;name);&lt;/span&gt;

    size_t ns_len = 0, after_ns_len = ZSTR_LEN(name);
    const char *after_ns = zend_memrchr(ZSTR_VAL(name), '\\', ZSTR_LEN(name));
    if (after_ns) { 
        after_ns += 1;
        ns_len = after_ns - ZSTR_VAL(name) - 1;
        after_ns_len = ZSTR_LEN(name) - ns_len - 1;

        /* lowercased namespace name &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; original constant name */
        tmp_name = zend_string_init(ZSTR_VAL(name), ZSTR_LEN(name), 0);
        zend_str_tolower(ZSTR_VAL(tmp_name), ns_len);
        zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;tmp_name);&lt;/span&gt;

        /* lowercased namespace name &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; lowercased constant name */
        tmp_name = zend_string_tolower(name);
        zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;tmp_name);&lt;/span&gt;

        if (!unqualified) {
            return ret;
        }
    } else {
        after_ns = ZSTR_VAL(name);
    }

    /* original unqualified constant name */
    tmp_name = zend_string_init(after_ns, after_ns_len, 0);
    zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;tmp_name);&lt;/span&gt;

    /* lowercased unqualified constant name */ 
    tmp_name = zend_string_alloc(after_ns_len, 0);
    zend_str_tolower_copy(ZSTR_VAL(tmp_name), after_ns, after_ns_len);
    zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;tmp_name);&lt;/span&gt;

    return ret;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到其中一个片段&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;/* lowercased namespace name &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; lowercased constant name */
tmp_name = zend_string_tolower(name);
zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;tmp_name);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tmp_name = zend_string_tolower(name)&lt;/code&gt;，这里全部转换成小写了&lt;/p&gt;

&lt;p&gt;接着往下看，发现php的好多地方都是不区分大小写的，包括IF和if， 函数名，方法名...都是不区分大小写的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;void zend_begin_method_decl(zend_op_array *op_array, zend_string *name, zend_bool has_body) {
    op_array-&amp;gt;scope = ce;
    op_array-&amp;gt;function_name = zend_string_copy(name);

    lcname = zend_string_tolower(name);
    lcname = zend_new_interned_string(lcname);
    ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法名称也全部在编译的时候转换成小写了！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;static void zend_begin_func_decl(znode *result, zend_op_array *op_array, zend_ast_decl *decl) {
    unqualified_name = decl-&amp;gt;name;
    op_array-&amp;gt;function_name = name = zend_prefix_with_ns(unqualified_name);
    lcname = zend_string_tolower(name);
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数名称在编译的时候也全部转换成小写了！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;key = zend_build_runtime_definition_key(lcname, decl-&amp;gt;lex_pos);
zend_hash_update_ptr(CG(function_table), key, op_array);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里表示把编译好的函数通过key,op_array代码送入进CG(function_table)的全局函数符号表！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;void zend_compile_class_decl(zend_ast *ast) {
    name = zend_new_interned_string(name);
    lcname = zend_string_tolower(name);

    name = zend_generate_anon_class_name(decl-&amp;gt;lex_pos);
    lcname = zend_string_tolower(name);
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译类的定义，也全部把类名称转换成小写了，所以类的名字大小写也没关系！&lt;/p&gt;

&lt;p&gt;继续往下看...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;void zend_compile_use(zend_ast *ast) 
{
    zend_ast_list *list = zend_ast_get_list(ast);
    uint32_t i;
    zend_string *current_ns = FC(current_namespace);
    uint32_t type = ast-&amp;gt;attr;
    HashTable *current_import = zend_get_import_ht(type);
    zend_bool case_sensitive = type == T_CONST;
    ...

    if (case_sensitive) {
        lookup_name = zend_string_copy(new_name);
    } else {
        lookup_name = zend_string_tolower(new_name);

    }
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码可以得出2个结论：
1. use 语法是不区分大小写的
2. define常量是严格区分大小写的&lt;/p&gt;

&lt;p&gt;继续看...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;if (type == T_CLASS &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; zend_is_reserved_class_name(new_name)) {
    zend_error_noreturn(E_COMPILE_ERROR, &quot;Cannot use %s as %s because '%s' &quot;
            &quot;is a special class name&quot;, ZSTR_VAL(old_name), ZSTR_VAL(new_name), ZSTR_VAL(new_name));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类名字定义，不能是预定义类名字的限制逻辑！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reserved_class_name&lt;/code&gt;的定义如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;static const struct reserved_class_name reserved_class_names[] = {
    {ZEND_STRL(&quot;bool&quot;)},
    {ZEND_STRL(&quot;false&quot;)},
    {ZEND_STRL(&quot;float&quot;)},
    {ZEND_STRL(&quot;int&quot;)},
    {ZEND_STRL(&quot;null&quot;)},
    {ZEND_STRL(&quot;parent&quot;)},
    {ZEND_STRL(&quot;self&quot;)},
    {ZEND_STRL(&quot;static&quot;)},
    {ZEND_STRL(&quot;string&quot;)},
    {ZEND_STRL(&quot;true&quot;)},
    {ZEND_STRL(&quot;void&quot;)},
    {ZEND_STRL(&quot;iterable&quot;)},
    {NULL, 0}
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，类名都不能是，上述预定义字符串！&lt;/p&gt;

&lt;p&gt;接下来看看类的编译&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;
static int zend_add_class_name_literal(zend_op_array *op_array, zend_string *name) {
{
    /* Original name */
    int ret = zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;name);&lt;/span&gt;

    /* Lowercased name */
    zend_string *lc_name = zend_string_tolower(name);
    zend_add_literal_string(op_array, &lt;span class=&quot;ni&quot;&gt;&amp;amp;lc_name);&lt;/span&gt;

    zend_alloc_cache_slot(ret);

    return ret;
}

void zend_begin_method_decl(zend_op_array *op_array, zend_string *name, zend_bool has_body) 
{
    zend_class_entry *ce = CG(active_class_entry);
    zend_bool in_interface = (ce-&amp;gt;ce_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; ZEND_ACC_INTERFACE) != 0;
    zend_bool in_trait = (ce-&amp;gt;ce_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; ZEND_ACC_TRAIT) != 0;
    zend_bool is_public = (op_array-&amp;gt;fn_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; ZEND_ACC_PUBLIC) != 0;
    zend_bool is_static = (op_array-&amp;gt;fn_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; ZEND_ACC_STATIC) != 0;

    zend_string *lcname;

    if (in_interface) {
        if (!is_public || (op_array-&amp;gt;fn_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; (ZEND_ACC_FINAL|ZEND_ACC_ABSTRACT))) {
            zend_error_noreturn(E_COMPILE_ERROR, &quot;Access type for interface method &quot;
                    &quot;%s::%s() must be omitted&quot;, ZSTR_VAL(ce-&amp;gt;name), ZSTR_VAL(name));
        }
        op_array-&amp;gt;fn_flags |= ZEND_ACC_ABSTRACT;
    }

    if (op_array-&amp;gt;fn_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; ZEND_ACC_ABSTRACT) {
        if (op_array-&amp;gt;fn_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; ZEND_ACC_PRIVATE) {
            zend_error_noreturn(E_COMPILE_ERROR, &quot;%s function %s::%s() cannot be declared private&quot;,
                    in_interface ? &quot;Interface&quot; : &quot;Abstract&quot;, ZSTR_VAL(ce-&amp;gt;name), ZSTR_VAL(name));
        }

        if (has_body) {
            zend_error_noreturn(E_COMPILE_ERROR, &quot;%s function %s::%s() cannot contain body&quot;,
                    in_interface ? &quot;Interface&quot; : &quot;Abstract&quot;, ZSTR_VAL(ce-&amp;gt;name), ZSTR_VAL(name));
        }

        ce-&amp;gt;ce_flags |= ZEND_ACC_IMPLICIT_ABSTRACT_CLASS;
    } else if (!has_body) {
        zend_error_noreturn(E_COMPILE_ERROR, &quot;Non-abstract method %s::%s() must contain body&quot;,
                ZSTR_VAL(ce-&amp;gt;name), ZSTR_VAL(name));
    }

    op_array-&amp;gt;scope = ce;
    op_array-&amp;gt;function_name = zend_string_copy(name);

    lcname = zend_string_tolower(name);
    lcname = zend_new_interned_string(lcname);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码有意思，php的什么和抽象类的修饰权限，全是在编译的时候检测的，而且，检测与否其实就是一个if&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;if (in_interface) {     
    if (!is_public || (op_array-&amp;gt;fn_flags &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; (ZEND_ACC_FINAL|ZEND_ACC_ABSTRACT))) {          
        zend_error_noreturn(E_COMPILE_ERROR, &quot;Access type for interface method &quot;                
                &quot;%s::%s() must be omitted&quot;, ZSTR_VAL(ce-&amp;gt;name), ZSTR_VAL(name));        
    }       
    op_array-&amp;gt;fn_flags |= ZEND_ACC_ABSTRACT;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是接口，但是修饰flag不是&lt;code&gt;public&lt;/code&gt;就报错了！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这也可以说明在php里面，写个&lt;code&gt;interface&lt;/code&gt;，然后写很多实现，这种模式不是很有必要，也就是欺骗一下编译器，运行的时候还是到&lt;code&gt;CG(function_table)&lt;/code&gt;或者&lt;code&gt;CG(active_class_entry)&lt;/code&gt;中取查找，会让编译过程变慢，所以特么&lt;code&gt;opcache&lt;/code&gt;这么有用的很大原因之一！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最后献上PHP之父&lt;code&gt;Rasmus&lt;/code&gt;在php巴黎会议的一段话&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Rasmus in a PHP conference in Paris saying more or less: &quot;I'm definitely not a good programmer, in terms of following strict coding rules or standards, 
       but I can say that if you rely on case sensitivity to recognize one function name from another, you're in kind of serious trouble
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里简单翻译一下：“我绝对不是一个好的程序员，至少在遵循严格的编码规则和标准方面， 但是我不得不说，如果你要依靠大小写来区分自己写的另一个函数，那你将会非常麻烦”
到此为止，这估计是php不区分大小写的最好的理由了。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160814/php-true.html</link>
    <guid>http://www.r9it.com/20160814/php-true</guid>
    <pubDate>Sun, 14 Aug 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>mongodb初步学习</title>
    <description>&lt;p&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。
在高负载的情况下，添加更多的节点，可以保证服务器性能。
MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;

&lt;h1 id=&quot;part-6542aa814d1&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;mongodb 安装很简单，不管windows还是linux直接去官方下载压缩包解压就行了。本人使用的linux&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-amazon-3.2.8.tgz
tar xvpzf mongodb-linux-x86_64-amazon-3.2.8.tgz
mv mongodb-linux-x86_64-ubuntu1204-3.0.3 /usr/local/mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-76886bf4d4e7b6a6&quot;&gt;添加配置文档&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vim /usr/local/mongodb/mongodb.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加配置 &lt;code&gt;dbpath=/data/mongodb&lt;/code&gt;
创建软连接,并创建目录，&lt;code&gt;{mongo_dir}&lt;/code&gt; 表示mongodb的安装目录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/bin
ln -s &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;mongo_dir&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/bin/mongod
ln -s &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;mongo_dir&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/bin/mongo

mkdir -p /data/mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-654289dfc40&quot;&gt;启动&lt;/h1&gt;

&lt;p&gt;启动很简单&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mongod -f /usr/local/mongodb/mongodb.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动成功之后，用&lt;code&gt;mongo&lt;/code&gt;客户端连接服务器&lt;/p&gt;

&lt;h1 id=&quot;part-2d3acd4b9dec9e60&quot;&gt;用户管理&lt;/h1&gt;

&lt;p&gt;mongodb创建用户老版本和新版不同，新版屏蔽了&lt;code&gt;addUser&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;use admin

db.addUser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;123456&quot;&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#老版本数据库&lt;/span&gt;

db.createUser&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;user: &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;,pwd: &lt;span class=&quot;s2&quot;&gt;&quot;123456&quot;&lt;/span&gt;,roles: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt; role: &lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;, db: &lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}]})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#新版数据库&lt;/span&gt;

db.system.users.find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;.pretty&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#查询用户&lt;/span&gt;

db.removeUser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#删除用户&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;addUser&lt;/code&gt;方法的三个参数分别是用户名，密码，第三个参数是表示是否是只读用户，默认是false&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createUser&lt;/code&gt;是新版的创建用户的方法&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;user : 用户名 &lt;br&gt;
pwd : 密码 &lt;br&gt;
roles : 指定用户的角色，可以用一个空数组给新用户设定空角色；在roles字段,可以指定内置角色和用户定义的角色&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;角色可选值如下&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read：允许用户读取指定数据库&lt;/li&gt;
&lt;li&gt;readWrite：允许用户读写指定数据库&lt;/li&gt;
&lt;li&gt;dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile&lt;/li&gt;
&lt;li&gt;userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户&lt;/li&gt;
&lt;li&gt;clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。&lt;/li&gt;
&lt;li&gt;readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限&lt;/li&gt;
&lt;li&gt;readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限&lt;/li&gt;
&lt;li&gt;userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限&lt;/li&gt;
&lt;li&gt;dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。&lt;/li&gt;
&lt;li&gt;root：只在admin数据库中可用。超级账号，超级权限&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;part-2c6866a4d2515028&quot;&gt;插入文档&lt;/h1&gt;

&lt;p&gt;mongodb不需要单独创建数据库和数据表(mongo中叫集合)，很方便，由于时nosql，数据的格式也是很灵活，是一个json对象
当执行插入的时候，使用的驱动程序会将数据保存成BSON（关于BSON，这个后续文章会讲到，这里暂且不表）的形式，然后将其送入数据库，数据库解析BSON，会做简单的验证，主要检验是否包含&amp;quot;_id&amp;quot;,并且文档不超过4MB，然后就简单的将文档插入数据库中。不过个人认为这样会带来一些好处或者坏的影响，最明显的副作用就是允许插入无效数据，好处就是这样貌似你也没有办法对mongodb进行注入攻击了，也就是说mongodb对注入攻击时天生免疫的（听起来很牛逼）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;use user;   &lt;span class=&quot;c&quot;&gt;#切换数据库，如果不存在则创建&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;show tables;
system.indexes
system.users
system.version
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;db.blog.insert&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:1, title:&lt;span class=&quot;s2&quot;&gt;&quot;this is a test&quot;&lt;/span&gt;, hits:1&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#往blog数据表中插入一个文档，如果blog表不存在则自动创建&lt;/span&gt;
WriteResult&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nInserted&quot;&lt;/span&gt; : 1 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2caf4f530fad45d3&quot;&gt;更新文档&lt;/h1&gt;

&lt;p&gt;MongoDB 使用 update() 和 save() 方法来更新集合中的文档。这里需要特别注明的是：更新的操作时原子性的，若是两个更新同时发生，则先到达服务器的先执行，接着执行另外一个，相互有冲突的更新可以火速传递，并不会产生干扰。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;update(query, data, upsert, multi);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;query : update的查询条件，类似sql update查询内where后面的。&lt;/li&gt;
&lt;li&gt;data : 要更新的数据&lt;/li&gt;
&lt;li&gt;upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。&lt;/li&gt;
&lt;li&gt;multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;db.blog.update&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;id:2, title:&lt;span class=&quot;s2&quot;&gt;&quot;new title&quot;&lt;/span&gt;, hits:2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;; //文档替换
db.blog.update&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$set&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;id:2, title:&lt;span class=&quot;s2&quot;&gt;&quot;new title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;; //使用修改器修改
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有一个问题是：update其实正确的解释是替换文档，并不是真正意义上的更新，因为通常文档只会有一部分需要更新的，
这个时候你就需要用到原子的更新修改器，这可以使得这部分更新极为高效，更新修改器时一种特殊的键，用来制定复杂的更新操作，比如调整，增加或者删除文档的key，还可能是操作数据或者内嵌文档。
mongo 有很多修改器的，下面列举几个&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$inc 增加某个字段的值  {$inc : {hits:10}} 把点击率加10&lt;/li&gt;
&lt;li&gt;$set 修改或者新增部分字段，而不是整个文档替换，这个用的比较经常，毕竟一般我们只改某个文档的部分内容，很少有整个替换的。&lt;/li&gt;
&lt;li&gt;$push 修改数组的值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;db.blog.insert&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:2, title:&lt;span class=&quot;s2&quot;&gt;&quot;new blog&quot;&lt;/span&gt;, tags:[&lt;span class=&quot;s2&quot;&gt;&quot;fuck&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;shit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]})&lt;/span&gt;;
WriteResult&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nInserted&quot;&lt;/span&gt; : 1 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;db.blog.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:2&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : ObjectId&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;57ac4b860776d82c21a31d77&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 2, &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;new blog&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;tags&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fuck&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;shit&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;db.blog.update&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$push&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;tags:&lt;span class=&quot;s2&quot;&gt;&quot;oh mygod&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}})&lt;/span&gt;;
WriteResult&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nMatched&quot;&lt;/span&gt; : 1, &lt;span class=&quot;s2&quot;&gt;&quot;nUpserted&quot;&lt;/span&gt; : 0, &lt;span class=&quot;s2&quot;&gt;&quot;nModified&quot;&lt;/span&gt; : 1 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;db.blog.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:2&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt; : ObjectId&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;57ac4b860776d82c21a31d77&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 2, &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;new blog&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;tags&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fuck&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;shit&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;oh mygod&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2cc29d85ae38f355&quot;&gt;查询文档&lt;/h1&gt;

&lt;p&gt;mongo的查询功能很强大，几乎可以跟sql数据库相媲美，尤其是还提供了很多操作符查询的
&amp;quot;$gt&amp;quot; 、&amp;quot;$gte&amp;quot;、 &amp;quot;$lt&amp;quot;、 &amp;quot;$lte&amp;quot;、&amp;quot;null查询&amp;quot;、&amp;quot;$all&amp;quot;、&amp;quot;$size&amp;quot;、&amp;quot;$in&amp;quot;、&amp;quot;$nin&amp;quot;、
&amp;quot;$and&amp;quot;、&amp;quot;$nor&amp;quot;、&amp;quot;$not&amp;quot;、&amp;quot;$or&amp;quot;、&amp;quot;$exists&amp;quot;、&amp;quot;$mod&amp;quot;、&amp;quot;$regex&amp;quot;、&amp;quot;$where&amp;quot;、&amp;quot;$slice&amp;quot;、&amp;quot;$elemMatch&amp;quot;...&lt;/p&gt;

&lt;p&gt;下面举几个例子&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;db.blog.find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;  &lt;span class=&quot;c&quot;&gt;#查找所有文档&lt;/span&gt;
db.blog.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:1&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#查找id=1的文档&lt;/span&gt;
db.user.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;name:/jack/i&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#正则查询，相当于sql中like查询&lt;/span&gt;
db.user.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;age:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$gte&lt;/span&gt;: 16, &lt;span class=&quot;nv&quot;&gt;$lt&lt;/span&gt;:18&lt;span class=&quot;o&quot;&gt;}})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#where age &amp;gt; 16 AND age &amp;lt; 18&lt;/span&gt;
db.user.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$or&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;name:&lt;span class=&quot;s2&quot;&gt;&quot;xiaoming&quot;&lt;/span&gt;, sex:&lt;span class=&quot;s2&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#where name=xiaoyang OR sex=M&lt;/span&gt;
db.user.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;name : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$in&lt;/span&gt;:[&lt;span class=&quot;s2&quot;&gt;&quot;xiaoming&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;xiaoyang&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;xiaowang&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#where name IN('xiaoming', 'xiaoyang', 'xiaowang')&lt;/span&gt;
db.user.find&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;name:&lt;span class=&quot;s2&quot;&gt;&quot;xiaoyang&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;.skip&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.limit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.sort&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:-1&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#分页查询，并且order by id desc&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2b9114f82e8516a5&quot;&gt;删除文档&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;db.remove(query, justOne);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;query : update的查询条件，类似sql update查询内where后面的。&lt;/li&gt;
&lt;li&gt;justOne : 默认为true，之删除匹配到的第一文档，如果设置为true，则会删除匹配到的所有文档&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;db.blog.remove&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;id:1&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;;
db.user.remove&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;status:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;#删除所有未审核的用户&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除文档速度时很快的，几乎在一瞬间完成的，但是如果你要清空整个文档，并且文档的数据量又大，建议你直接删除集合（然后重建索引）会更快。比如一个含有100w个文档的集合，你一条一条删除可能要花费近50秒的时间，但是直接删除集合却只要0.01秒不到。&lt;/p&gt;

&lt;h1 id=&quot;mongodb&quot;&gt;MongoDB优缺点分析&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt; 通过这两天的简单学习，发现mongodb的优势还是很明显的&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;速度比较快，我使用php的Mongodb扩展进行测试，插入100w条记录平均耗时65秒，每秒钟插入15000条左右，这速度甩mysql几条街&lt;/li&gt;
&lt;li&gt;文档的格式相当自由，这对于关系行数据库优势还是比较大的，对于一些不规则的数据结构比如商品的属性什么的，每个中商品的属性都不一样，各类的都有，这要是用关系型数据库去实现得建N个表，折腾半天才能勉强实现，但是如果用&lt;code&gt;mongo&lt;/code&gt;的话，一个表就可以解决，而且逻辑非常建档，相当方便。&lt;/li&gt;
&lt;li&gt;相对于&lt;code&gt;mysql&lt;/code&gt;的读写分离主从配置，分表分库什么的，&lt;code&gt;mongo&lt;/code&gt;的分片还是简单的多，所以说&lt;code&gt;mongo&lt;/code&gt;的扩展性和高可用也是有保障的。&lt;/li&gt;
&lt;li&gt;内置了&lt;code&gt;GridFS&lt;/code&gt; GridFS是一个出色的分布式文件系统，可以支持海量的数据存储，能够满足对大数据集的快速范围查询。&lt;/li&gt;
&lt;li&gt;内置了强大的查询功能，支持各种复杂查询，尤其时$where操作符查询，使得查询几乎能做任何事情了，可以跟sql数据库达到相同的效果，甚至能实现更复杂的查询。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;当然，缺点也是有的&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对于已经习惯了写sql来查询的小伙伴来说mongo的查询条件确实有点复杂，没有sql那么简单直接，尤其一些分组查询之类的，虽然能实现，但是确实是比较麻烦的。&lt;/li&gt;
&lt;li&gt;不支持事务，这个确实是个蛋疼的问题，这就注定了一些业务的数据肯定是不能用mongo来存储了，如果非要的话可能时要自己在应用层实现事务了。不过这也不是太大的问题，大不了把那些数据存回mysql之类的关系型数据库了。&lt;/li&gt;
&lt;li&gt;mongodb占用的空间比较大，其实mongo的效率是用空间换来的，首先BSON这种文档格式就不是很省空间，而且mongo的一些操作也是有点浪费空间，比如mongo在删除数据的时候其实并没有真正的释放磁盘空间，为避免记录删除后的数据的大规模挪动，原记录空间不删除，只标记“已删除”即可，以后还可以重复利用。&lt;/li&gt;
&lt;li&gt;目前我还没有发现，以后再慢慢找。。。&lt;/li&gt;
&lt;/ol&gt;
</description>
    <link>http://www.r9it.com/20160811/mongodb.html</link>
    <guid>http://www.r9it.com/20160811/mongodb</guid>
    <pubDate>Thu, 11 Aug 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>docker学习笔记（二）</title>
    <description>&lt;p&gt;Dockerfile是用来自动化创建容器的语法命令，你可以先把你要创建的容器的脚本写成dockerfile,比如创建容器，然后执行一些初始化的命令，安装初始化的的软件等等，其实就是相当一个
录播功能，你先把你要做的操作用dockerfile记录下来，不用每次创建容器都要敲一大堆的命令，省事。&lt;/p&gt;

&lt;p&gt;Dockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用&lt;code&gt;Docker build&lt;/code&gt;命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。
Dockerfile指令不区分大小写。但是，命名约定为全部大写。&lt;/p&gt;

&lt;p&gt;这里贴上一个自己的写dockerfile&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#选择镜像源&lt;/span&gt;
FROM ubuntu:14.04

&lt;span class=&quot;c&quot;&gt;#设置作者信息&lt;/span&gt;
MAINTAINER yangjian &amp;lt;yangjian102621@gmail.com&amp;gt;

&lt;span class=&quot;c&quot;&gt;#设置ubuntu源，使用阿里云的源&lt;/span&gt;
RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list 
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list

&lt;span class=&quot;c&quot;&gt;#安装软件包&lt;/span&gt;
RUN apt-get update
RUN apt-get install -y openssh-server vim
RUN mkdir -p /var/run/sshd 
RUN mkdir -p /root/.ssh

RUN locale-gen zh_CN.UTF-8
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zh_CN.UTF-8 UTF-8&quot;&lt;/span&gt; &amp;gt;&amp;gt; /var/lib/locales/supported.d/local
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;en_US.UTF-8 UTF-8&quot;&lt;/span&gt; &amp;gt;&amp;gt; /var/lib/locales/supported.d/local 
RUN apt-get install -y language-pack-zh-hans

&lt;span class=&quot;c&quot;&gt;#开放对外端口&lt;/span&gt;
EXPOSE 80 22 9000 8080

&lt;span class=&quot;c&quot;&gt;#添加文件&lt;/span&gt;
ADD run.sh /run.sh
ADD authorized_keys /root/.ssh/authorized_keys
ADD vimrc /root/.vimrc
RUN chmod 755 /run.sh

&lt;span class=&quot;c&quot;&gt;#解决语言包引起的perl报错&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;export LC_ALL=C&quot;&lt;/span&gt; &amp;gt;&amp;gt; /root/.profile

&lt;span class=&quot;c&quot;&gt;#执行初始化命令&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/run.sh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    <link>http://www.r9it.com/20160502/docker-study-2.html</link>
    <guid>http://www.r9it.com/20160502/docker-study-2</guid>
    <pubDate>Mon, 02 May 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>docker学习笔记（一）</title>
    <description>&lt;p&gt;作为码农，最麻烦的莫过于系统奔溃之后需要重新配置环境了，这个比较麻烦且耗时，一个偶然的机会了解docker,它解决了长期困扰我的问题&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;关于docker&lt;/h1&gt;

&lt;p&gt;Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker的应用场景&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;隔离开发环境，每个容器都是个独立的开发环境，如果这个容器坏了，删掉再创建一个容器即可。&lt;/li&gt;
&lt;li&gt;web应用的自动化打包和发布；&lt;/li&gt;
&lt;li&gt;自动化测试和持续集成、发布；&lt;/li&gt;
&lt;li&gt;在服务型环境中部署和调整数据库或其他的后台应用；&lt;/li&gt;
&lt;li&gt;从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;docker的特点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第一：它是轻量级的 – 容器的内存占用非常小一般只有200左右，它只要对主进程分配内存再加上几十MB&lt;/p&gt;

&lt;p&gt;第二：它很快速 – 启动一个容器与启动一个单进程一样快。不需要几分钟，您可以在几秒钟内启动一个全新的容器。&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;安装 docker&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install apt-transport-https
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
sudo bash -c &lt;span class=&quot;s2&quot;&gt;&quot;echo deb https://get.docker.io/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&quot;&lt;/span&gt;
sudo apt-get update
sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2dd02f6a0343ee0d&quot;&gt;获取镜像&lt;/h1&gt;

&lt;p&gt;获取官方镜像(默认)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker pull ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取指定镜像仓库的镜像，如获取阿里云docker镜像&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker pull registry.mirrors.aliyuncs.com/library/centos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2b903e2446168499&quot;&gt;创建容器&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run -d --name php ubuntu:14.04 /usr/sbin/sshd -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2b9114f82dfd9fca&quot;&gt;删除容器&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker rm  container_name &lt;span class=&quot;c&quot;&gt;#这里传入容器名称或者容器id&lt;/span&gt;
sudo docker rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sudo docker ps -a -q&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#删除所有已终止的容器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-c4f990e9e0056aad&quot;&gt;启动|终止容器&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker start container_name | container_id
sudo docker stop container_name | container_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2ed630525971aa68&quot;&gt;进入容器&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker attach &amp;lt;container_name&amp;gt;|&amp;lt;container_id&amp;gt;
sudo docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -it &amp;lt;container_name&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-4865e717869cd230&quot;&gt;打包和导入镜像&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; sudo docker commit 046331bdbb90 new-image  &lt;span class=&quot;c&quot;&gt;#提交容器&lt;/span&gt;

 sudo docker save new-image &amp;gt; /tmp/new-image.tar &lt;span class=&quot;c&quot;&gt;#保存容器&lt;/span&gt;
 sudo docker save -o centos.tar centos &lt;span class=&quot;c&quot;&gt;#也可以用这种方法保存容器&lt;/span&gt;

 sudo docker load &amp;lt; /tmp/new-image.tar &lt;span class=&quot;c&quot;&gt;#导入容器&lt;/span&gt;
 sudo docker load --input /tmp/new-image.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2db919e3af6aacb4&quot;&gt;端口映射&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. 自动映射端口&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-P 使用时需要指定 --expose 选项，指定需要对外提供服务的端口&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run -t -P --expose 22 --name container_name  ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 绑定端口到指定接口&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run -it -p 8080:80 -p 22:22 container_name ubuntu:14.04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-a4424fc877f1a8fc&quot;&gt;挂载宿主文件&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run -it -v /share:/usr/local/myshare --name container_name ubuntu:14.04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现容器的网络超级慢，运行一个apt-get update要半天, 那么可能需要切换源.
这里贴上一个阿里云的源，亲测很快&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverseV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;docker&quot;&gt;docker镜像的远程托管&lt;/h1&gt;

&lt;p&gt;我们可以像把代码托管在git仓库一样，容器的镜像也是可以托管到远程镜像仓库的，比如说&lt;a href=&quot;https://dev.aliyun.com/search.html&quot;&gt;阿里云的镜像仓库。&lt;/a&gt;
登陆进去创建一个镜像仓库。（这里不提供教程，很容创建的），创建之后你就可以管理你的docker镜像了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;登陆 docker registry:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo docker login --username&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;username&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; registry.cn-shenzhen.aliyuncs.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;{username}是你的阿里云账号全名，密码是您开通namespace时设置的密码。&lt;/p&gt;

&lt;p&gt;registry.cn-shenzhen.aliyuncs.com 是你的镜像仓库的地址&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;从registry中拉取镜像：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo docker pull registry.cn-shenzhen.aliyuncs.com/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;仓库名称&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;镜像版本号&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;将镜像推送到registry：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo docker login --username&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;username&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; registry.cn-shenzhen.aliyuncs.com
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo docker tag &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ImageId&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; registry.cn-shenzhen.aliyuncs.com/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;仓库名称&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;镜像版本号&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo docker push registry.cn-shenzhen.aliyuncs.com/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;仓库名称&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;镜像版本号&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-d75acaf914475b61&quot;&gt;使用过程中的一些思考&lt;/h1&gt;

&lt;p&gt;(1) 在使用和管理容器的时候，你要始终记住一点 &lt;strong&gt;docker 创建的只是一个容器，而不是虚拟机&lt;/strong&gt;，
容器只是起到一个隔离作用，这一点很容易搞混。
在linux系统中，你会发现docker容器中的进程都是跑再宿主机器中的
，这一点很容易自己证实，你只需要在宿主机器上输入&lt;code class=&quot;scode&quot;&gt;ps aux&lt;/code&gt;查看你宿主机器上没有的进程就好了。
比如你在容器中开了nginx，但是宿主机器并没有启动nginx，在执行 &lt;code class=&quot;scode&quot;&gt;ps aux|grep nginx&lt;/code&gt; 也是能看到有进程的。
所以，&lt;strong&gt;如果你在宿主目录启动了多个容器，千万不要在宿主目录使用pkill去杀死某个进程&lt;/strong&gt;, 因为这样你可能没法知道
你杀死的是哪个容器的进程，最终不得不把所有的容器重启一遍。&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;(2) 容器在启动的时候的ip地址是自动分配的，不可更改。一般是从 &lt;code class=&quot;scode&quot;&gt;172.17.0.2&lt;/code&gt; 开始。为什么？因为 
&lt;code class=&quot;scode&quot;&gt;172.17.0.1&lt;/code&gt; 这个ip是宿主机的。从这你也可以知道，在一台宿主机器上你最多只能创建 65534个容器。&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;p&gt;(3) 容器和外部的通信是不受影响的，因为它是通过宿主机的路由出去的，但是外部机器和容器通信则必须通过宿主机的端口映射来实现，
否则，宿主机无法提供路由到达容器。这一点不搞清楚，你的在配置服务的时候一定会踩各种坑。
但是同一个宿主机器创建的容器之间是可以通过内网ip(&lt;code class=&quot;scode&quot;&gt;172.28.x.x&lt;/code&gt;)直接通信的。&lt;/p&gt;

&lt;p&gt;(4) window系统的docker是通过虚拟机实现的，具体实现原理是，通过docker-tool 调用vbox创建一个ubuntu的虚拟机，虚拟机再创建容器。
如果能搞清这层关系，你就可以理解其实在windows系统中，&lt;strong&gt;真正的宿主机是虚拟机，不是windows系统的宿主机器。&lt;/strong&gt;
它们是完全不同的系统了，你在windows系统里面是肯定无法管理容器中的进程的。
那很显然，它们之间的网络通信也肯定不像linux那么简单了。大部分人都在百度，google提问，为什么创建容器的时候挂载不了
D盘，或者E，F盘的文件夹。如有你能了解上面所说的，真正的宿主机是虚拟机，而并非window物理机，那么这个问题就很容易解决了。
容器只能挂载宿主机的目录的，所以想要挂载windows的目录或者磁盘，那你首先必须要把windows的磁盘挂载（共享）到虚拟机，这样问题就解决。
&lt;strong&gt;同样，网络也是一样，想要过window宿主机访问容器，那你需要先在虚拟机上做window物理机和虚拟机的端口映射。
然后创建的容器的时候在把容器的端口映射到虚拟机，这样经过2次映射，你就可以通过windows主机的端口直接访问容器的服务了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《完》&lt;/strong&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160501/docker-study-1.html</link>
    <guid>http://www.r9it.com/20160501/docker-study-1</guid>
    <pubDate>Sun, 01 May 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>linux抓包神器tcpdump</title>
    <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;tcpdump是一个用于截取网络分组，并输出分组内容的工具。tcpdump凭借强大的功能和灵活的截取策略，使其成为类UNIX系统下用于网络分析和问题排查的首选工具。 &lt;/p&gt;

&lt;h1 id=&quot;part-2e3001dc1b04ed73&quot;&gt;选项介绍&lt;/h1&gt;

&lt;p&gt;引用
-A 以ASCII格式打印出所有分组，并将链路层的头最小化。 &lt;/p&gt;

&lt;p&gt;-c 在收到指定的数量的分组后，tcpdump就会停止。 &lt;/p&gt;

&lt;p&gt;-C 在将一个原始分组写入文件之前，检查文件当前的大小是否超过了参数file_size 中指定的大小。如果超过了指定大小，则关闭当前文件，然后在打开一个新的文件。参数 file_size 的单位是兆字节（是1,000,000字节，而不是1,048,576字节）。 &lt;/p&gt;

&lt;p&gt;-d 将匹配信息包的代码以人们能够理解的汇编格式给出。 &lt;/p&gt;

&lt;p&gt;-dd 将匹配信息包的代码以c语言程序段的格式给出。 &lt;/p&gt;

&lt;p&gt;-ddd 将匹配信息包的代码以十进制的形式给出。 &lt;/p&gt;

&lt;p&gt;-D 打印出系统中所有可以用tcpdump截包的网络接口。 &lt;/p&gt;

&lt;p&gt;-e 在输出行打印出数据链路层的头部信息。 &lt;/p&gt;

&lt;p&gt;-E 用spi@ipaddr algo:secret解密那些以addr作为地址，并且包含了安全参数索引值spi的IPsec ESP分组。 &lt;/p&gt;

&lt;p&gt;-f 将外部的Internet地址以数字的形式打印出来。 &lt;/p&gt;

&lt;p&gt;-F 从指定的文件中读取表达式，忽略命令行中给出的表达式。 &lt;/p&gt;

&lt;p&gt;-i 指定监听的网络接口。 &lt;/p&gt;

&lt;p&gt;-l 使标准输出变为缓冲行形式，可以把数据导出到文件。 &lt;/p&gt;

&lt;p&gt;-L 列出网络接口的已知数据链路。 &lt;/p&gt;

&lt;p&gt;-m 从文件module中导入SMI MIB模块定义。该参数可以被使用多次，以导入多个MIB模块。 &lt;/p&gt;

&lt;p&gt;-M 如果tcp报文中存在TCP-MD5选项，则需要用secret作为共享的验证码用于验证TCP-MD5选选项摘要（详情可参考RFC 2385）。 &lt;/p&gt;

&lt;p&gt;-b 在数据-链路层上选择协议，包括ip、arp、rarp、ipx都是这一层的。&lt;/p&gt;

&lt;p&gt;-n 不把网络地址转换成名字。&lt;/p&gt;

&lt;p&gt;-nn 不进行端口名称的转换。&lt;/p&gt;

&lt;p&gt;-N 不输出主机名中的域名部分。例如，‘nic.ddn.mil‘只输出’nic‘。 &lt;/p&gt;

&lt;p&gt;-t 在输出的每一行不打印时间戳。 &lt;/p&gt;

&lt;p&gt;-O 不运行分组分组匹配（packet-matching）代码优化程序。 &lt;/p&gt;

&lt;p&gt;-P 不将网络接口设置成混杂模式。 &lt;/p&gt;

&lt;p&gt;-q 快速输出。只输出较少的协议信息。 &lt;/p&gt;

&lt;p&gt;-r 从指定的文件中读取包(这些包一般通过-w选项产生)。 &lt;/p&gt;

&lt;p&gt;-S 将tcp的序列号以绝对值形式输出，而不是相对值。 &lt;/p&gt;

&lt;p&gt;-s 从每个分组中读取最开始的snaplen个字节，而不是默认的68个字节。 &lt;/p&gt;

&lt;p&gt;-T 将监听到的包直接解释为指定的类型的报文，常见的类型有rpc远程过程调用）和snmp（简单网络管理协议；）。 &lt;/p&gt;

&lt;p&gt;-t 不在每一行中输出时间戳。 &lt;/p&gt;

&lt;p&gt;-tt 在每一行中输出非格式化的时间戳。 &lt;/p&gt;

&lt;p&gt;-ttt 输出本行和前面一行之间的时间差。 &lt;/p&gt;

&lt;p&gt;-tttt 在每一行中输出由date处理的默认格式的时间戳。 &lt;/p&gt;

&lt;p&gt;-u 输出未解码的NFS句柄。 &lt;/p&gt;

&lt;p&gt;-v 输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息。 &lt;/p&gt;

&lt;p&gt;-vv 输出详细的报文信息。 &lt;/p&gt;

&lt;p&gt;-w 直接将分组写入文件中，而不是不分析并打印出来。&lt;/p&gt;

&lt;h1 id=&quot;part-2c9a35823f532b99&quot;&gt;常用案例&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#使用tcpdump监听来自eth0适配卡且通信协议为port 22，目标来源为192.168.1.100的数据包资料&lt;/span&gt;
tcpdump -i eth0 -nn port 22 and src host 192.168.1.100

&lt;span class=&quot;c&quot;&gt;#使用tcpdump抓取访问eth0适配卡且访问端口为tcp 9080&lt;/span&gt;
tcpdump -i eth0 dst 172.168.70.35 and tcp port 9080

&lt;span class=&quot;c&quot;&gt;#使用tcpdump抓取与主机192.168.43.23或着与主机192.168.43.24通信报文，并且显示在控制台上&lt;/span&gt;
tcpdump -X -s 1024 -i eth0 host &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.43.23 or 192.168.43.24&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; and  host 172
cpdump -A -S 1024 -i eth0 host 172.28.2.243
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    <link>http://www.r9it.com/20160427/tcpdump.html</link>
    <guid>http://www.r9it.com/20160427/tcpdump</guid>
    <pubDate>Wed, 27 Apr 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>ubuntu编译安装php5.5.26</title>
    <description>&lt;h1 id=&quot;part-2c5c0dc80f531703&quot;&gt;安装依赖&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install -y build-essential gcc g++ make

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;packages &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;bzip2 libzip-dev libperl-dev libc6-dev  
libevent-dev libpcre3 libpcre3-dev libpcrecpp0 zlibc openssl 
libsasl2-dev libmcrypt-dev libbz2-1.0 libbz2-dev libpng3 
libjpeg62 libjpeg62-dev libpng-dev libpng12-0 libpng12-dev curl 
libcurl3 libmhash2 libmhash-dev libpq-dev libpq5 gettext 
libncurses5-dev libjpeg-dev libxml2-dev libfreetype6 
libfreetype6-dev libssl-dev libcurl3 libcurl4-openssl-dev 
libcurl4-gnutls-dev mcrypt;
&lt;span class=&quot;k&quot;&gt;do 
&lt;/span&gt;apt-get install -y &lt;span class=&quot;nv&quot;&gt;$packages&lt;/span&gt; --force-yes;
apt-get -fy install;
apt-get -y autoremove; 
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;php&quot;&gt;下载php&lt;/h1&gt;

&lt;p&gt;去 &lt;a href=&quot;http://php.net/downloads.php%E4%B8%8B%E8%BD%BD%E4%BD%A0%E6%83%B3%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E6%88%91%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AF5.5.26&quot;&gt;http://php.net/downloads.php下载你想要安装的版本，我下载的是5.5.26&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;tar xvpzf php-5.5.26.tar.gz&lt;/p&gt;

&lt;h1 id=&quot;php&quot;&gt;配置php编译选项&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;php-5.5.26
./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/php &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-config-file-path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/php/etc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-config-file-scan-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/php/etc/conf.d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-fpm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-mhash &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-fpm-user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;www-data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-fpm-group&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;www-data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-mysql&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysqlnd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-maintainer-zts &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-mysqli&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysqlnd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-pdo-mysql&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysqlnd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-opcache &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-inline-optimization &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-sockets &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-zip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-jpeg-dir &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-png-dir &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-calendar &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-zlib &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-bz2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-iconv &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-gd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-libXML-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/phpdep/libxml2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-gd-native-ttf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-mbstring &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-ftp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-mcrypt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-bcmath &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --disable-debug &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --with-openssl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --disable-fileinfo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --enable-sysvsem --enable-inline-optimization

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-d0d97faaaf11&quot;&gt;安装 &lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;
make &lt;span class=&quot;nv&quot;&gt;ZEND_EXTRA_LIBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-liconv'&lt;/span&gt;
make
make install

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-31ba5727a4e931a3&quot;&gt;修改配置文档&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/php/etc 
mkdir conf.d
cp php-fpm.con.default php-fpm.conf 
cp  php.ini-development php.ini

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-683138481078651&quot;&gt;编写启动脚本&lt;/h1&gt;

&lt;p&gt;vim /usr/local/bin/php-fpm&lt;/p&gt;

&lt;p&gt;copy 下面代码&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;
&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this script starts and stops the php-fpm daemon&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# author yangjian&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# processname: php-fpm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# config:      /usr/local/php/etc/php-fpm.conf&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;php-fpm daemon&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PHP_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/php
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;php-fpm
&lt;span class=&quot;nv&quot;&gt;DAEMON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PHP_DIR&lt;/span&gt;/sbin/&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PHP_CONFIG_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PHP_DIR&lt;/span&gt;/etc/php.ini
&lt;span class=&quot;nv&quot;&gt;FPM_CONFIG_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PHP_DIR&lt;/span&gt;/etc/php-fpm.conf 
&lt;span class=&quot;nv&quot;&gt;PIDFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PHP_DIR&lt;/span&gt;/var/run/&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;.pid

&lt;span class=&quot;c&quot;&gt;# If the daemon file is not found, terminate the script.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -x &lt;span class=&quot;nv&quot;&gt;$DAEMON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0

d_start&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$DAEMON&lt;/span&gt; -y &lt;span class=&quot;nv&quot;&gt;$FPM_CONFIG_FILE&lt;/span&gt; -c &lt;span class=&quot;nv&quot;&gt;$PHP_CONFIG_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; Faild to start service. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

d_stop&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -QUIT &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat &lt;span class=&quot;nv&quot;&gt;$PIDFILE&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot; no running. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

d_reload&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -USR2 &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat &lt;span class=&quot;nv&quot;&gt;$PIDFILE&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; could not reload. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; OK!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
d_start
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Stopping &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; OK!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
d_stop
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

reload&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Reloading &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; configuration... &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
d_reload
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Reloaded.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

restart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Restarting &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Successfully. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
d_stop
sleep 1
d_start
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage:{start|stop|restart|reload)&quot;&lt;/span&gt; &amp;gt;&amp;amp;2
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;3
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动php-fpm &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;chmod +x /usr/local/bin/php-fpm &lt;br/&gt;
/usr/local/bin/php-fpm start&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    <link>http://www.r9it.com/20160425/php-compile.html</link>
    <guid>http://www.r9it.com/20160425/php-compile</guid>
    <pubDate>Mon, 25 Apr 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>ubuntu编译安装tengine</title>
    <description>&lt;h1 id=&quot;part-2c5c0dc80f531703&quot;&gt;安装依赖&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install build-essential gcc g++ libssl-dev libpcre3-dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;part-2bdf3d20facd3237&quot;&gt;下载软件&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;wget &lt;a href=&quot;http://tengine.taobao.org/download/tengine-2.1.0.tar.gz&quot;&gt;http://tengine.taobao.org/download/tengine-2.1.0.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;part-49b00ecc74be4171&quot;&gt;编译&amp;amp;安装&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;tar xvpzf tengine-2.1.0.tar.gz &lt;br /&gt;
cd tengine/ &lt;br /&gt;
./configure --prefix=/usr/local/tengine --user=www-data --group=www-data &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    <link>http://www.r9it.com/20160427/tengine-compile.html</link>
    <guid>http://www.r9it.com/20160427/tengine-compile</guid>
    <pubDate>Sun, 24 Apr 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>切割nginx日志</title>
    <description>&lt;p&gt;nginx运行时间久了日志会比较大，经常会需要将日志按天切割，方便查看。不多说，直接上脚本&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this script cut nginx logs&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# nginx日志根目录&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOGS_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/nginx&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/run/nginx.pid&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## get the date of yesterday  yyyy-MM-dd&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;YESTERDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date -d last-day +%Y-%m-%d&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## 生成路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date -d last-day +%Y&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date -d last-day +%m&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## 项目日志的路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;APP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOGS_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/myapp

&lt;span class=&quot;c&quot;&gt;## 创建日志路径&lt;/span&gt;
mkdir -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOGS_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/
mkdir -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/

&lt;span class=&quot;c&quot;&gt;## 移动日志&lt;/span&gt;
mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOGS_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/access.log &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOGS_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/access_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;YESTERDAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.log
mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/access.log &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/access_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;YESTERDAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.log

&lt;span class=&quot;c&quot;&gt;## 向 Nginx 主进程发送 USR1 信号。USR1 信号是重新打开日志文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -USR1 &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样日志就会按天分割了。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160421/cut-nginx-log.html</link>
    <guid>http://www.r9it.com/20160421/cut-nginx-log</guid>
    <pubDate>Thu, 21 Apr 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>ubuntu server中文乱码</title>
    <description>&lt;p&gt;安装中文语言包&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install language-pack-zh-hans&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;获取语言包支持&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo locale-gen zh_CN.UTF-8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加语言支持&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo vim /var/lib/locales/supported.d/local&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加如下内容（如果已经有了就不用再添加）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;zh_CN.UTF-8 UTF-8 &lt;br /&gt;
en_US.UTF-8 UTF-8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;重新配置 locales&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo dpkg-reconfigure locales&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设置默认语言&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;vim /etc/environment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在文件末尾添加以下代码&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;LANG=&amp;quot;zh_CN.UTF-8&amp;quot; &lt;br /&gt;
LANGUAGE=&amp;quot;zh_CN:zh:en_US:en&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;配置vim，解决vim显示中文乱码问题&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;vim ~/.vimrc &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-f6ef662b6e1bb8a1&quot;&gt;添加以下配置 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 &lt;br /&gt;
set termencoding=utf-8 &lt;br /&gt;
set encoding=utf-8 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    <link>http://www.r9it.com/20160416/ununtu-server-garbled.html</link>
    <guid>http://www.r9it.com/20160416/ubuntu-server-garbled</guid>
    <pubDate>Sat, 16 Apr 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>javascript 通过发送http头信息跨域</title>
    <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从古至今，javascript ajax跨域问题一直是比较纠结的一个问题，虽然说网上有各种解决方案，包括设置域名，和jsonp方案，但是始终觉得实现起来有点小麻烦，html5出来之后就有一种新的解决方案，简单，粗暴，我喜欢。&lt;/p&gt;

&lt;p&gt;到底是怎么回事呢，简单来说就是通过后端发送http头信息来解决前端的跨域操作。在网上搜索了一下这个跨域的头信息，几乎90%的都是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Access-Control-Allow-Origin:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哥一下兴喜万分啊，于是赶紧试了一下，结果发现病没什么卵用，还是提示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;XMLHttpRequest cannot load http://www.test.my/cross-domain/post.php.
Request header field X-Requested-With is not allowed by Access-Control-Allow-Headers.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显然，跨域是没有成功的。于是赶紧又去google了一下 “javascript 跨域头信息”， 结果发现有有篇博客上有写到需要加上以下头信息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Access-Control-Allow-Headers:x-requested-with,content-type
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试了以下，果然是可以跨域的，没有问题。下面贴上测试代码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前端代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;js跨域请求测试&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.test.my/cross-domain/post.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zhangsan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;后端代码（别问我为什么用php，因为php是最好的语言O(∩_∩)O~）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//发送跨域头信息,指定允许其他域名访问
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Access-Control-Allow-Origin:*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 响应类型,这里可以指定，也可以不指定，不过个人觉得还是指定好一些
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Access-Control-Allow-Methods:POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 响应头设置
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Access-Control-Allow-Headers:x-requested-with,content-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器输出的相应&lt;/p&gt;

&lt;p&gt;Object {username: &amp;quot;zhangsan&amp;quot;, password: &amp;quot;123456&amp;quot;}&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160330/javascript-cross-domain.html</link>
    <guid>http://www.r9it.com/20160330/javascript-html5-cross-domain</guid>
    <pubDate>Wed, 30 Mar 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>lastPass-在线密码管理神器</title>
    <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天偶然发现一个很有意思的东西， lastPass。Lastpass是一个在线密码管理器和页面过滤器，它可以使得你的网页浏览更加的轻松和更安全。
有了他以后妈妈再也不用担心你忘记网络密码了，从此以后也不必在为了填写网络表格而浪费时间，让lastpass来替你完成这些任务。&lt;/p&gt;

&lt;h1 id=&quot;part-6542828af1b&quot;&gt;功能&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;创建强密码，只需用主密码登录一次。&lt;/li&gt;
&lt;li&gt;自动填写表格，节省您的时间&lt;/li&gt;
&lt;li&gt;您经常访问的网站只需一次点击 ,无需重复输入密码.&lt;/li&gt;
&lt;li&gt;无缝访问和管理来自多台计算机的数据.&lt;/li&gt;
&lt;li&gt;与朋友 - 分享登录和让别人分享你的登录信息.&lt;/li&gt;
&lt;li&gt;使用一次性密码，屏幕和键盘时，可保持你的连接安全。&lt;/li&gt;
&lt;li&gt;支持IE浏览器，并将与使用的其他浏览器保持同步，支持多台计算机&lt;/li&gt;
&lt;li&gt;支持Firefox ，Opera，谷歌浏览器，Safari浏览器，iPhone，Opera Mini(通过bookmarklets)&lt;/li&gt;
&lt;li&gt;支持导入其他密码管理器，如RoboForm ，Keepass，PasswordSafe，MyPasswordSafe，Sxipper，TurboPasswords，PassPack，Firefox和IE 内置的密码管理&lt;/li&gt;
&lt;li&gt;导出您的可用数据包括插件和网站，甚至回到Firefox浏览器。&lt;/li&gt;
&lt;li&gt;在Windows 中，可以帮助您恢复存储在计算机上丢失的密码&lt;/li&gt;
&lt;li&gt;捕获密码，其他密码管理器不会捕捉像AJAX的登录工作的,例如美国银行登录的步骤，像用&amp;#39;保存所有输入的数据&amp;#39;功能的荷兰银行的网站。&lt;/li&gt;
&lt;li&gt;支持绑定第三方验证工具 如Google Authenticator&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;part-3786d380c0aeb00&quot;&gt;安全性&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;安全创建账号：&lt;/strong&gt;
用户可用地址邮件地址和强主密码创建账号以本地产生其唯一的加密密匙。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;领先的加密运算法则：&lt;/strong&gt;
lastPass 用 PBKDF2 SHA-256 和加盐散列值执行了 AES-256 位加密以确保云端数据的安全性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;仅本地加密：&lt;/strong&gt;
用户数据是设备级的加密和解密。存储到数据库内的数据是保密的，甚至 LastPass 都不能访问。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;私有主密码：&lt;/strong&gt;
用户的主密码，和用于加密解密用户数据的密匙是从不会发送到 LastPass 服务器上的，LastPass 也从不去访问。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;双因素身份验证：&lt;/strong&gt;
双因素身份验证通过在授权用户前的二次登陆给给 LastPass 账号添加了额外的安全性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;随时随地可用：&lt;/strong&gt;
存储密码时，便利和灵活访问时很关键的。LastPass 可确保当您需要密码时它们是安全可用的。&lt;/p&gt;

&lt;h1 id=&quot;part-266aa0bcf2f5b517&quot;&gt;安装和使用&lt;/h1&gt;

&lt;p&gt;lastPass 支持主流的浏览器，包括IE。安装方式很简单，它是通过浏览器插件的来工作的。安装方式有2种&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一种是去官方网站去下载安装包&lt;/strong&gt;， 建议下载 chrome版，支持二进制&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2016/03/2016-03-25-003.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载地址： &lt;a href=&quot;https://lastpass.com/misc_download2.php&quot;&gt;&lt;a href=&quot;https://lastpass.com/&quot;&gt;https://lastpass.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然如果你是firefox浏览器或者 google chrome, 那么你直接去应用商店去下载插件就好了&lt;/p&gt;

&lt;p&gt;这里贴上google chrome 插件下载地址：&lt;a href=&quot;https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=zh-CN&quot;&gt;
&lt;a href=&quot;https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=zh-CN&quot;&gt;https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=zh-CN&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装好插件之后打开浏览器在地址栏右边会有lastPass插件图标&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2016/03/2016-03-25-002.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后打开你要登陆的网站，点击开插件 sites -&amp;gt; add site&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2016/03/2016-03-25-004.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登录的时候直接选中账号就可以自动填充用户名和密码了&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2016/03/2016-03-25-005.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然你也可以进入 &amp;quot;My LastPass Vault&amp;quot; 去管理你的用户名和密码，以及进行一些 account setting&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-view&quot; data-src=&quot;/images/2016/03/2016-03-25-001.png&quot; src=&quot;/images/1px.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好吧，心动不如行动，赶紧去折腾你的lastPass密码神器啊，相信你会爱上它。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160326/lastpass.html</link>
    <guid>http://www.r9it.com/20160326/lastpass-tool</guid>
    <pubDate>Sat, 26 Mar 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>liquid学习笔记</title>
    <description>&lt;p&gt;jekyll是一个不可思议的博客系统，优雅，简单。有了她之后你可以在vim编辑器中愉快的写博客，然后push到github去发布博客。
但是在愉快玩耍之前你必须要了解Liquid语法，因为jekyll的模板使用的是Liquid语法的标签。网上关于Liquid的学习资料比较多，但是很多的都不全面
要么就是讲得太简单了，要么就讲的太多了。但是对于我们这种只想玩转jekyll博客的来说，搞懂一些基本的够写博客用就可以了。所以特地整理了
一套容易学习的教程，给需要的人使用。&lt;/p&gt;

&lt;p&gt;Liquid语法是相当强大的，特别是她的过滤器操作（管道操作的格式），总体来说分为一下几部分&lt;/p&gt;

&lt;h1 id=&quot;output&quot;&gt;Output&lt;/h1&gt;

&lt;p&gt;简单来说就是输出变量， eg:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{{ name }} &lt;br /&gt;
  {{ &amp;quot;Hello world&amp;quot; }} //输出 &amp;quot;Hello world&amp;quot; &lt;br /&gt;
  {{ user.name }}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;output-filters&quot;&gt;高级Output: Filters&lt;/h1&gt;

&lt;p&gt;简单来说就是过滤器，对变量的数据进行过滤（处理）， 她的语法原理类似linux系统的shell脚本的管道操作，也就是把前一个操作的计算结果作为后一个操作的参数
不多说，直接看 eg:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{{ post.author | capitalize }} //将博客的作者的首字母转大写 &lt;br /&gt;
{{ user.name | upcase }} //用户名转大写 &lt;br /&gt;
{{ post.date | date: &amp;quot;%Y-%m-%d&amp;quot; }} //转换日期的格式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;part-a65a7558fda467dd&quot;&gt;标准过滤器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;date - 格式化时间&lt;/li&gt;
&lt;li&gt;capitalize - 输出字符串，字符串（句子）首字母大写&lt;/li&gt;
&lt;li&gt;downcase - 转换小写&lt;/li&gt;
&lt;li&gt;upcase - 转换大写&lt;/li&gt;
&lt;li&gt;first - 获取数组的第一个元素&lt;/li&gt;
&lt;li&gt;last - 获取数组的最后一个元素&lt;/li&gt;
&lt;li&gt;join - 用指定的字符拼接数组元素&lt;/li&gt;
&lt;li&gt;sort - 排序数组&lt;/li&gt;
&lt;li&gt;map - 映射或收集给定属性的数组&lt;/li&gt;
&lt;li&gt;size - 返回数组大小&lt;/li&gt;
&lt;li&gt;escape - 转移字符串&lt;/li&gt;
&lt;li&gt;strip_html - 除去字符串中的html标签?&lt;/li&gt;
&lt;li&gt;strip_newlines - 除去字符串中的回车?&lt;/li&gt;
&lt;li&gt;newline_to_br - 将所有的回车&amp;quot;\n&amp;quot; 转换成&amp;quot;&amp;lt;br /&amp;gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;replace - 替换所有匹配内容&lt;/li&gt;
&lt;li&gt;replace_first - 替换第一个匹配内容&lt;/li&gt;
&lt;li&gt;remove - 移除所有匹配内容&lt;/li&gt;
&lt;li&gt;remove_first - 移除第一个匹配内容&lt;/li&gt;
&lt;li&gt;prepend - 在字符串前面加上内容&lt;/li&gt;
&lt;li&gt;append - 字符串后面加上内容&lt;/li&gt;
&lt;li&gt;minus - 减法&lt;/li&gt;
&lt;li&gt;plus - 加法&lt;/li&gt;
&lt;li&gt;times - 乘法&lt;/li&gt;
&lt;li&gt;divided_by - 除法&lt;/li&gt;
&lt;li&gt;split - 分割字符串&lt;/li&gt;
&lt;li&gt;modulo - 取余&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;好了，闲话不多说，下面我们看demo&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{{ &amp;quot;abcdswe&amp;quot; | replace:&amp;quot;s&amp;quot;, &amp;quot;w&amp;quot; }}  //输出 abcdwwe &lt;br /&gt;
{{ &amp;quot;ming&amp;quot; | prepend:&amp;quot;xiao&amp;quot; }} //输出 xiaoming &lt;br /&gt;
{{ 10 | divided_by:2}} //输出 5 &lt;br /&gt;
{{ &amp;quot;&amp;lt;span&amp;gt;xiaoming&lt;/span&gt;&amp;quot; | strip_html }} //输出 xiaoming&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tags&quot;&gt;Tags&lt;/h3&gt;

&lt;p&gt;模板中的逻辑处理通常通过使用tags来完成， 目前Liquid支持的tags有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assign - 定义变量&lt;/li&gt;
&lt;li&gt;capture - Block tag为变量赋值&lt;/li&gt;
&lt;li&gt;case - Block tag its the standard case...when block&lt;/li&gt;
&lt;li&gt;comment - Block tag 注释&lt;/li&gt;
&lt;li&gt;cycle - 循环列举, 类似数据结构中的枚举.&lt;/li&gt;
&lt;li&gt;for - for循环block&lt;/li&gt;
&lt;li&gt;if - 判断block&lt;/li&gt;
&lt;li&gt;include - 引入模板&lt;/li&gt;
&lt;li&gt;raw - 转义内容tag, 这个非常有用否则你要想再jekyll输出 Liquid标签就要添加很多\来输出标签代码， 本文就是用到了这个标签&lt;/li&gt;
&lt;li&gt;unless - Mirror of if statement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;赋值操作：e.g:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% capture username %}{{ name }}{% endcapture %} //将 name 的值赋给 username
{% assign date = page.date | date: &quot;%Y&quot; %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;if-else&quot;&gt;If / Else&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% if user %}
  Hello {{ user.name }}
{% endif %}

{% if user != null %}
  Hello {{ user.name }}
{% endif %}

{% if user.name == 'tobi' %}
  Hello tobi
{% elsif user.name == 'bob' %}
  Hello bob
{% endif %}

{% if user.name == 'tobi' or user.name == 'bob' %}
  Hello tobi or bob
{% endif %}

{% if user.name == 'bob' and user.age &amp;gt; 45 %}
  Hello old bob
{% endif %}

# Same as above
{% unless user.name == 'tobi' %}
  Hello non-tobi
{% endunless %}

# Check for the size of an array
{% if user.payments == empty %}
   you never paid !
{% endif %}

{% if user.payments.size &amp;gt; 0  %}
   you paid !
{% endif %}

{% if user.age &amp;gt; 18 %}
   Login here
{% else %}
   Sorry, you are too young
{% endif %}

# array = 1,2,3
{% if array contains 2 %}
   array includes 2
{% endif %}

# string = 'hello world'
{% if string contains 'hello' %}
   string includes 'hello'
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;case&quot;&gt;Case 语句&lt;/h1&gt;

&lt;p&gt;如果你需要多的条件判断，那么你可以使用case语句:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% case condition %}
{% when 1 %}
hit 1
{% when 2 or 3 %}
hit 2 or 3
{% else %}
... else ...
{% endcase %}

//Another Example:
{% case template %}

{% when 'label' %}
     // {{ label.title }}
{% when 'product' %}
     // {{ product.vendor | link_to_vendor }} / {{ product.title }}
{% else %}
     // {{page_title}}
{% endcase %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;cycle&quot;&gt; Cycle&lt;/h1&gt;

&lt;p&gt;默认循环&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% cycle 'one', 'two', 'three' %}
{% cycle 'one', 'two', 'three' %}
{% cycle 'one', 'two', 'three' %}
{% cycle 'one', 'two', 'three' %}

//结果为：
one
two
three
one

//当然你也可以指定分组来轮询
{% cycle 'group 1': 'one', 'two', 'three' %}
{% cycle 'group 1': 'one', 'two', 'three' %}
{% cycle 'group 2': 'one', 'two', 'three' %}
{% cycle 'group 2': 'one', 'two', 'three' %}

//那么对应的结果为：
one
two
one
two
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;for&quot;&gt;for 循环&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;//最普通的循环
{% for post in site.posts %}
  {{ post.title }}
{% endfor %}

//限制循环次数
# array = [1,2,3,4,5,6]
{% for item in array limit:2 offset:2 %}
  {{ item }}
{% endfor %}
# results in 3,4

//反向循环
{% for item in collection reversed %}
  {{item}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考资料：&lt;span&gt;&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160309/liquid-study-note.html</link>
    <guid>http://www.r9it.com/20160309/liquid-study-note</guid>
    <pubDate>Wed, 09 Mar 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>jekyll 环境的搭建</title>
    <description>&lt;p&gt;jekyll是一个不可思议的博客系统，优雅，简单。
jekyll不需要数据库支持。但是可以配合第三方服务,例如Disqus搭建功能丰富的博客。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。
有了她之后你可以在vim编辑器中愉快的写博客，然后push到github去发布博客，这种感觉总结来说就一个词：很吊！&lt;/p&gt;

&lt;h1 id=&quot;ruby&quot;&gt;安装ruby&lt;/h1&gt;

&lt;p&gt;由于jekyll的运行依赖于 ruby, 所以你必须先安装 ruby&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install ruby ruby-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你用的ubuntu 14.01 LTS desktop版， 也许会出现找不到软件包 ruby-dev 的报错
没有关系，是你的系统缺少ruby开发环境的源，给它加上就好了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-add-repository ppa:brightbox/ruby-ng
sudo apt-get update
sudo apt-get install ruby ruby-dev  //注意，这里的ruby版本你可以指定如：ruby2.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来你就可以使用gem安装jekyll了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果安装过程中出现如下报错&lt;/p&gt;

&lt;blockquote&gt;
ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)
    Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://api.rubygems.org/quick/Marshal.4.8/jekyll-3.1.2.gemspec.rz)
&lt;/blockquote&gt;

&lt;p&gt;这是因为ruby的镜像被墙了，改用taobao镜像&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem sources --r https://rubygems.org/
gem sources --r http://rubygems.org/
gem sources -a https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装必备组件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo gem install pygments.rb
sudo gem install redcarpet.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就把jekyll安装完成了。&lt;/p&gt;

&lt;p&gt;好了，你接下来可以创建你的blog了，切换到你要创建博客的目录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不幸的出现如下报错信息，那么恭喜你，你中奖了。&lt;/p&gt;

&lt;p&gt;/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in &lt;code&gt;require&amp;#39;: iconv will be deprecated in the future, use String#encode instead.
WARNING: Could not read configuration. Using defaults (and options).
    No such file or directory - new/_config.yml
Building site: new -&amp;gt; blog
/usr/lib/ruby/vendor_ruby/jekyll/site.rb:126:in&lt;/code&gt;chdir&amp;#39;: No such file or directory - /home/yangjian/new/ (Errno::ENOENT)
    from /usr/lib/ruby/vendor_ruby/jekyll/site.rb:126:in &lt;code&gt;read_directories&amp;#39;
    from /usr/lib/ruby/vendor_ruby/jekyll/site.rb:98:in&lt;/code&gt;read&amp;#39;
    from /usr/lib/ruby/vendor_ruby/jekyll/site.rb:38:in &lt;code&gt;process&amp;#39;
    from /usr/bin/jekyll:250:in&lt;/code&gt;&lt;main&gt;&amp;#39;
yangjian@yangjian-desktop:~$ ruby custom_require.rb install
ruby: No such file or directory -- custom_require.rb (LoadError)&lt;/p&gt;

&lt;p&gt;出现这个问题原因很简单，报错信息也提示的很清楚，那就是你安装的ruby版本和jekyll需要的版本不一样
原因是系统本身已经安装了ruby1.9.1
所以你现在要做的就是把老版本的ruby卸载掉&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get remove ruby1.9.1 ruby1.9.1-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再查看ruby版本 ruby -v, 如果出现类似&lt;/p&gt;

&lt;p&gt;ruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-linux-gnu]&lt;/p&gt;

&lt;p&gt;那么恭喜你，你的老的ruby版本删除了，默认使用的是新的版
现在再执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出现 New jekyll site installed in /home/user/blog. 那么恭喜你安装成功了，接下来你可以愉快玩耍 jekyll了。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20160302/jekyll-install.html</link>
    <guid>http://www.r9it.com/20160302/jekyll-install</guid>
    <pubDate>Wed, 02 Mar 2016 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>linux命令学习：chattr</title>
    <description>&lt;p&gt;今天在服务器上删除某个文件时发现一直删除不了，提示：Operation not permitted。 个人觉得很诡异，因为我是用root登录的，不应该没有权限，
果断google一下，原来是chattr命令在作怪，chattr命令是用来改变文件、目录属性的，和chmod，ls这些命令相比，chmod只是改变文件的读写、执行权限，
更底层的属性控制是由chattr来改变的。&lt;/p&gt;

&lt;p&gt;chattr命令的用法：chattr [ -RV ] [ -v version ] [ mode ] files...
最关键的是在[mode]部分，[mode]部分是由+-=和[ASacDdIijsTtu]这些字符组合的，这部分是用来控制文件的
属性。
&lt;blockquote&gt;
    &lt;p&gt;+ ：在原有参数设定基础上，追加参数。&lt;/p&gt;
    &lt;p&gt;- ：在原有参数设定基础上，移除参数。&lt;/p&gt;
    &lt;p&gt;= ：更新为指定参数设定。&lt;/p&gt;
    &lt;p&gt;A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。&lt;/p&gt;
    &lt;p&gt;S：硬盘I/O同步选项，功能类似sync。&lt;/p&gt;
    &lt;p&gt;a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文 件安全，只有root才能设定这个属性。&lt;/p&gt;
    &lt;p&gt;c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。&lt;/p&gt;
    &lt;p&gt;d：即no dump，设定文件不能成为dump程序的备份目标。&lt;/p&gt;
    &lt;p&gt;i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。&lt;/p&gt;
    &lt;p&gt;j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。
    如果filesystem被设定参数为 data=journal，则该参数自动失效。&lt;/p&gt;
    &lt;p&gt;s：保密性地删除文件或目录，即硬盘空间被全部收回。&lt;/p&gt;
    &lt;p&gt;u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。&lt;/p&gt;

&lt;p&gt;应用实例：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用chattr命令防止系统中某个关键文件被修改&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chattr +i /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后试一下rm mv rename等命令操作于该文件，都是得到Operation not permitted 的结果&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让某个文件只能往里面追加内容，不能删除，一些日志文件适用于这种操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chattr +a /data1/user_act.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    <link>http://www.r9it.com/20151112/chattr.html</link>
    <guid>http://www.r9it.com/20151112/linux-command-chattr</guid>
    <pubDate>Thu, 12 Nov 2015 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>解决搜狗输入法在linux系统不能输入中文</title>
    <description>&lt;p&gt;今天期待已久的搜狗输入法linux版上线了，对于我们这种之前用习惯了搜狗输入法的屌丝来说是个不错的消息，于是赶紧去官网下载了一个装上了。迫不及待的试了一下，很不错，很流畅。
打中文的速度一下子快起来了。但是当我打开 idea, phpstorm, sublime 这些软件之后傻眼了，发现输入不了中文，虽然习惯了coding的时候写英文注释，但是有些复杂的逻辑还是需要
 用中文来解释会好些。于是到google搜索半天，终于找到了靠谱，简单的解决方法，在此记录一下以便后期查看&lt;/p&gt;

&lt;p&gt;（一）如果你用 KDM, GDM, LightDM 等显示管理器，请在 ~/.xprofile 中加入以下代码；如果您用 startx 或者 Slim 启动，即使用 .xinitrc 的场合，则改在 ~/.xinitrc 中加入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@im=fcitx&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加上这些之后在gedit这些文本编辑器中可以输入中文了&lt;/p&gt;

&lt;p&gt;（二）如果是IDE不能输入中文，比如 java-idea phpstorm等，需要在启动脚本中，idea.sh 或 phpstrom.sh 中加入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@im=fcitx&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; XMODIFIERS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    <link>http://www.r9it.com/20151102/sogou-input-chinese.html</link>
    <guid>http://www.r9it.com/20151102/sogou-input-chinese-in-ubuntu</guid>
    <pubDate>Mon, 02 Nov 2015 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>使用存储过程删除字段和索引</title>
    <description>&lt;p&gt;今天对公司OA系统的数据表进行了一些重构，需要删除很多字段和索引，但是发现有两个问题&lt;/p&gt;

&lt;p&gt;第一个就是：删除字段的语句要些很多变，好麻烦的说&lt;/p&gt;

&lt;p&gt;第二个就是：当字段或者索引不存在时会报错，这样下面sql语句就会被中断执行，这个更麻烦&lt;/p&gt;

&lt;p&gt;所以第一时间就想到了使用mysql的存储过程就可以解决这个问题，这里记录一下sql语句，以便以后借鉴&lt;/p&gt;

&lt;h1 id=&quot;part-2b9114f82dd8e96a&quot;&gt;删除字段&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot; data-lang=&quot;mysql&quot;&gt;DROP PROCEDURE IF EXISTS Del_Col;  
-- 创建删除字段的存储过程

create procedureDel_Col (IN p_tablename VARCHAR(200), IN p_col VARCHAR(200)) 

BEGIN 



  if exists (select * from information_schema.columns WHERE table_name = p_tablename AND column_name = p_col) then

     alter table p_tablename drop column p_col;

  end if; 


END $$


DELIMITER ;

CALL Del_Col ('user', 'country_id');

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;part-2b9114f83307ebcb&quot;&gt;删除索引&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot; data-lang=&quot;mysql&quot;&gt;-- 删除已经存在的存储过程
DROP PROCEDURE IF EXISTS Del_idx; 
DELIMITER $$
-- 创建删除索引的存储过程 
create procedure Del_idx(IN p_tablename VARCHAR(200), IN p_idxname VARCHAR(200)) 
BEGIN 

     DECLARE str VARCHAR(250); 

  set @str=concat(' drop index ',p_idxname,' on ',p_tablename);  

  select count(*) into @cnt from information_schema.statistics where table_name=p_tablename and index_name=p_idxname ; 

  if @cnt &amp;gt; 0 then  

    PREPARE stmt FROM @str; 

    EXECUTE stmt ; 

  end if; 

END $$

DELIMITER ;
-- 删除文章索引
CALL Del_idx('article', 'userid');

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    <link>http://www.r9it.com/20150519/delete-index-by-procedure.html</link>
    <guid>http://www.r9it.com/20150519/delete-col-or-index-by-procedure</guid>
    <pubDate>Tue, 19 May 2015 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>linux 安装flashplayer</title>
    <description>&lt;p&gt;网上看到很多结果，各种复杂，比如去ubuntu 软件中心安装，或者直接用apt-get 或者yum安装，但是这些对有的系统有用，但是经常不灵&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其实很简单的，就3步就好了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第一步，去 &lt;a href=&quot;https://get.adobe.com/cn/flashplayer/?no_redirect&quot;&gt;https://get.adobe.com/cn/flashplayer/?no_redirect&lt;/a&gt; 下载 install_flash_player_11_linux.x86_64.tar.gz&lt;/p&gt;

&lt;p&gt;第二步，將下载好的包拷到某个目录下并解压,将libflashplayer.so拷到firefox的插件目录/usr/lib/mozilla/plugin/下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo cp libflashplayer.so /usr/lib/mozilla/plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后将usr/目录下所有文件拷到/usr下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo cp -r usr/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三步，重启浏览器，你就可以愉快的看电影和听音乐了。&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20150511/install-flash-player.html</link>
    <guid>http://www.r9it.com/20150511/ubuntu-install-flash-player</guid>
    <pubDate>Mon, 11 May 2015 00:00:00 +0800</pubDate>
  </item>

  <item>
    <title>「转」为什么你应该（从现在开始就）写博客</title>
    <description>&lt;h3 id=&quot;part-cd65e470da848010&quot;&gt;（一）为什么你应该从现在开始就写博客&lt;/h3&gt;

&lt;p&gt;用一句话来说就是，&lt;strong&gt;写一个博客有很多好处，却没有任何明显的坏处&lt;/strong&gt;。（阿灵顿的情况属于例外，而非常态，就像不能拿抽烟活到一百岁的英国老太太的个例来反驳抽烟对健康的极大损伤一样）&lt;/p&gt;

&lt;p&gt;让我说得更明确一点：&lt;strong&gt;用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处&lt;/strong&gt;。Note：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。&lt;/p&gt;

&lt;p&gt;下面是我个人认为写一个长期的&lt;strong&gt;价值博客&lt;/strong&gt;的最大的几点好处：&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;能够交到很多志同道合的朋友&lt;/strong&gt;。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，&lt;strong&gt;因此，和他们即便不打照面，也是心照不宣&lt;/strong&gt;。即便素未谋面也能坐下来就聊得热火朝天。&lt;/p&gt;

&lt;p&gt;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，&lt;strong&gt;第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离&lt;/strong&gt;，而传统的建立朋友圈子的方法则受到地域限制。&lt;strong&gt;第二&lt;/strong&gt;，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“&lt;strong&gt;一次表达，无数次阅读&lt;/strong&gt;”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，&lt;strong&gt;用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mindhacks.cn/former-life-of-mindhacks/&quot;&gt;我曾在CSDN上写了近六年的博客&lt;/a&gt;，在一年半前建立了一个Google Groups（&lt;a href=&quot;https://groups.google.com/group/pongba&quot;&gt;TopLanguage&lt;/a&gt;），由于我的博客的长期阅读者都是互相有共同语言的，因此这个Group一开始就热火朝天，而高质量的技术讨论则进一步吸引了更多的牛人的参与，雪球滚起来之后，就很难停下来了，将近一年半下来，从这个Group的讨论中我获益良多[1]。而对于非程序员朋友，科学松鼠会则是一个很好的例子。&lt;/p&gt;

&lt;p&gt;2)&lt;strong&gt; 书写是为了更好的思考&lt;/strong&gt;。我在&lt;a href=&quot;http://mindhacks.cn/2009/02/09/writing-is-better-thinking/&quot;&gt;《书写是为了更好的思考》&lt;/a&gt;里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;“教”是最好的“学”&lt;/strong&gt;。&lt;strong&gt;如果一件事情你不能讲清楚，十有八九你还没有完全理解&lt;/strong&gt;。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。&lt;/p&gt;

&lt;p&gt;为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、&lt;strong&gt;但不知道自己知道&lt;/strong&gt;的潜在概念或假设（assumptions）都挖出来，把它们从&lt;a href=&quot;http://baike.baidu.com/link?url=SQNxMrp38Apw9VzROy1Nz88LnOusRuNKoiaely1pMER-XltINa6Rs0Vi4kYyLA_WlBOofS3TZV8srGWRAUaxi_&quot; target=&quot;_blank&quot;&gt;内隐记忆&lt;/a&gt;拉扯到&lt;a href=&quot;http://baike.baidu.com/view/1205803.htm&quot; target=&quot;_blank&quot;&gt;外显记忆&lt;/a&gt;中。因为只有完全知道、&lt;strong&gt;并知道自己知道&lt;/strong&gt;一切来龙去脉的人，才能真正把一件事情讲得&lt;a href=&quot;http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/&quot; target=&quot;_blank&quot;&gt;通通透透&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。&lt;/p&gt;

&lt;p&gt;TopLanguage上的一位朋友&lt;a href=&quot;http://sunxiunan.com/&quot;&gt;sagasw&lt;/a&gt;曾经讲了这样一个小故事：&lt;strong&gt;据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了&lt;/strong&gt;。当然，你不一定要对小熊说，你可以在大脑中虚构一个听众，一个不懂行的听众，然后你说给他听。这是可行的，我经常在路上用。不过如果你能坐下来，我建议你还是说给实际的听众听——即写下你的思考，因为&lt;a href=&quot;http://mindhacks.cn/2009/02/09/writing-is-better-thinking/&quot;&gt;书写是更好的思考&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），&lt;a href=&quot;http://www.douban.com/subject/1005576/&quot;&gt;我们平时所作的推理过程很大部分都是自动的&lt;/a&gt;，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“&lt;strong&gt;反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事&lt;/strong&gt;”，对此&lt;strong&gt;你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我自己则是非常&lt;strong&gt;珍惜类似这样的机会&lt;/strong&gt;，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候&lt;strong&gt;往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候&lt;/strong&gt;。另一方面，“&lt;strong&gt;我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题&lt;/strong&gt;”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。&lt;/p&gt;

&lt;p&gt;为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但&lt;strong&gt;如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会&lt;/strong&gt;。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“&lt;strong&gt;反正&lt;/strong&gt;”这个词了。&lt;/p&gt;

&lt;p&gt;于是，反思的机会就来了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。&lt;/strong&gt;很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却&lt;strong&gt;不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢&lt;/strong&gt;？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）&lt;/p&gt;

&lt;p&gt;绝大多数时候其实我们都会&lt;a href=&quot;http://www.douban.com/subject/1005576/&quot;&gt;不假思索地得出一些结论，就像上了发条的自动机&lt;/a&gt;，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是&lt;a href=&quot;http://www.douban.com/subject/1005576/&quot;&gt;思维捷径&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;去教一个完全不懂的人，则是一种最最强大和彻底的反思途径&lt;/strong&gt;——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。&lt;strong&gt;这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;讨论是绝佳的反思&lt;/strong&gt;。另一方面，&lt;strong&gt;很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听&lt;/strong&gt;，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，&lt;strong&gt;几乎总能看到与你持不同意见的人，&lt;/strong&gt;然后你通过&lt;strong&gt;比较你和他的观念之间的差别&lt;/strong&gt;，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在&lt;strong&gt;进一步讨论中你们就会不断地迫使对方拿出更深层次的理由&lt;/strong&gt;，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一&lt;strong&gt;些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;激励你去持续学习和思考&lt;/strong&gt;。如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…&lt;/p&gt;

&lt;p&gt;为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。&lt;strong&gt;我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;学会持之以恒地做一件事情&lt;/strong&gt;。很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造&lt;a href=&quot;http://en.wikipedia.org/wiki/Flow_(psychology)&quot;&gt;流体验&lt;/a&gt;的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。&lt;/p&gt;

&lt;p&gt;7) &lt;strong&gt;一个长期的价值博客是一份很好的简历&lt;/strong&gt;。这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到&lt;strong&gt;价值博客的时代&lt;/strong&gt;，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但&lt;strong&gt;至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;part-599117375f85828&quot;&gt;（二）怎么做到长期写一个价值博客&lt;/h3&gt;

&lt;p&gt;注意到我并没有说“怎么做到长期&lt;strong&gt;坚持&lt;/strong&gt;写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。&lt;/p&gt;

&lt;p&gt;一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。&lt;/p&gt;

&lt;p&gt;怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。&lt;/p&gt;

&lt;p&gt;这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。&lt;strong&gt;如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;part-92576dd4af4f9dda&quot;&gt;（三）可能出现的问题以及怎样应付&lt;/h3&gt;

&lt;p&gt;即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is Skill”，&lt;strong&gt;意志力很大程度上来源于有正确的方法，而非天生&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;担心别人认为没有价值&lt;/strong&gt;。事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，&lt;strong&gt;无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;或者，&lt;strong&gt;你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力&lt;/strong&gt;，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。&lt;/p&gt;

&lt;p&gt;最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;担心想法太幼稚或有漏洞等等被别人笑话&lt;/strong&gt;。人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（&lt;a href=&quot;http://mindhacks.cn/2009/02/09/writing-is-better-thinking/&quot;&gt;《书写是更好的思考》&lt;/a&gt;，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。&lt;/p&gt;

&lt;p&gt;Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;得不到激励&lt;/strong&gt;。这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写&lt;strong&gt;价值博客&lt;/strong&gt;，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人&lt;a href=&quot;http://en.wikipedia.org/wiki/Paul_Buchheit&quot;&gt;Paul Buchheit&lt;/a&gt;，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （&lt;a href=&quot;http://paulbuchheit.blogspot.com/2009/01/overnight-success-takes-long-time.html&quot;&gt;(1)&lt;/a&gt;，&lt;a href=&quot;http://www.codinghorror.com/blog/archives/001207.html&quot;&gt;(2)&lt;/a&gt;），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;写不出来&lt;/strong&gt;。这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。&lt;/p&gt;

&lt;p&gt;无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），&lt;strong&gt;有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多&lt;/strong&gt;。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]&lt;/p&gt;

&lt;p&gt;所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。&lt;/p&gt;

&lt;p&gt;当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;[1] 你可以看一下&lt;a href=&quot;http://delicious.com/pongba/toplanguage&quot;&gt;我收藏的一些精彩主题&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;[2] 尽管我并不完全同意这句话本身，但它这种解决问题链上更基本环节的问题的精神是我赞同的。&lt;/p&gt;

&lt;p&gt;[3] 《影响力2》这个名字起得很聪明，其实它并不是《影响力》的作者写的。&lt;/p&gt;

&lt;p&gt;[4] 我忘了这则实验的出处了，但实验的精神是记忆犹新的，哪位同学记得原始出处的麻烦提醒我一下。&lt;/p&gt;

&lt;p&gt;[5] 对于阿基米德这个故事的&lt;a href=&quot;http://en.wikipedia.org/wiki/Eureka_(word)&quot;&gt;真实性是有争议的&lt;/a&gt;，毕竟几千年久远的事情谁弄得清呢。但是故事的道理是很本质的，我们平时也经常有类似的体验，加上阿基米德的“尤里卡”实在太出名了，所以我相信用用无妨。&lt;/p&gt;

&lt;p&gt;原文来自http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/&lt;/p&gt;
</description>
    <link>http://www.r9it.com/20150307/start-bloging-now.html</link>
    <guid>http://www.r9it.com/20150307/why-you-should-start-blogging-now</guid>
    <pubDate>Sat, 07 Mar 2015 00:00:00 +0800</pubDate>
  </item>


</channel>
</rss>
